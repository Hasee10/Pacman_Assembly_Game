Microsoft (R) Macro Assembler Version 14.38.33135.0	    05/11/25 10:29:48
source.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 00000001		ConsoleInfo CONSOLE_CURSOR_INFO <1,0>
	   00000000

				;-----------------map variable will store the current map-----------------
 00000008 00000000		map dd 0
 0000000C 00000000		mapLength dd 0
				        ;25 line map
				;blueprint maps
 00000010 2D 2D 2D 2D 2D	map_1   BYTE "------------------------------------------------------------------------------------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00
 00000089  7C 20 20 2E 2E	        BYTE "|  .............................. *  .................................................  *   ........................   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 2A
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 2A 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 20 7C
	   00
 00000102  7C 20 20 20 20	        BYTE "|                                 *                                                     *                              |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 0000017B  7C 20 20 20 20	        BYTE "|                                 *  .................................................  *   ........................   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 2A 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 20 7C
	   00
 000001F4  7C 20 20 20 20	        BYTE "|                                 *                                                     *                              |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 0000026D  7C 20 20 2E 2E	        BYTE "|  .............................. *                                                     *                              |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 000002E6  7C 20 20 20 20	        BYTE "|                                 *               **************************            *                   ***********|",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 7C
	   00
 0000035F  7C 20 20 20 20	        BYTE "|             ********            *                                                     *         ***                  |",0 
	   20 20 20 20 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 2A
	   2A 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 000003D8  7C 20 20 20 20	        BYTE "|                    *            *   ................................................  *       .......                |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 2A 20
	   20 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00000451  7C 20 20 2E 2E	        BYTE "|  ................. * .......... *                      ************                   *     * ....... *              |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 2A 20 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 2A
	   20 2E 2E 2E 2E
	   2E 2E 2E 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 000004CA  7C 20 20 20 20	        BYTE "|                    *            *                      ************                   *     ***********              |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00000543  7C 20 20 20 20	        BYTE "|                                 *                      **   ..   **                   *                              |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 20
	   20 20 2E 2E 20
	   20 20 2A 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 000005BC  7C 20 20 2E 2E	        BYTE "|  .........................................  *          ** ...... **           *                                      |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 20
	   2E 2E 2E 2E 2E
	   2E 20 2A 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00000635  7C 20 20 20 20	        BYTE "|                                             *   ..........................    *          .........................   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 20 7C
	   00
 000006AE  7C 20 20 2E 2E	        BYTE "|  .........................................  *                                 *                                      |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00000727  7C 2A 2A 2A 2A	        BYTE "|***************                              *                                 *                                      |",0 
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 000007A0  7C 20 20 20 20	        BYTE "|                       ***********************                                 ************************               |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00000819  7C 20 20 20 20	        BYTE "|               *                             *   ..........................    *                                      |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00000892  7C 20 20 2E 2E	        BYTE "|  .............*..........................   *          **********             *                  .........           |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2A 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 0000090B  7C 20 20 20 20	        BYTE "|               *                             *         *  ......  *            *                **********************|",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 2E
	   2E 2E 2E 2E 2E
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 7C
	   00
 00000984  7C 20 20 20 20	        BYTE "|               *******                       *        *            *           *                                      |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 2A 2A 2A
	   2A 2A 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 000009FD  7C 20 20 2E 2E	        BYTE "|  ........................................   *    ........................     *     .............................    |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 2A 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 7C
	   00
 00000A76  7C 20 20 20 20	        BYTE "|                                             *                                 *                                      |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00000AEF  7C 20 20 20 20	        BYTE "|                                             *                                 *     ..............................   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 20 7C
	   00
 00000B68  2D 2D 2D 2D 2D	        BYTE "------------------------------------------------------------------------------------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00

 00000BE1 2D 2D 2D 2D 2D	map_2   BYTE "------------------------------------------------------------------------------------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00
 00000C5A  7C 20 20 2E 2E	        BYTE "|  .............................. *  .................................................  + & ........................   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 2A
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 2B 20
	   26 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 20 7C
	   00
 00000CD3  7C 20 20 4F 20	        BYTE "|  O                              *                                                     *                      O       |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 4F 20 20 20
	   20 20 20 20 7C
	   00
 00000D4C  7C 20 20 20 20	        BYTE "|                                 *  .................................................  *   ......................     |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 2A 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 20 20 7C
	   00
 00000DC5  7C 20 20 20 20	        BYTE "|                                 *                                                     *                              |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00000E3E  7C 20 20 2E 2E	        BYTE "|  .............................. *            ******  ............  *******            *           ******     .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00000EB7  7C 20 20 20 20	        BYTE "|                     ****                       .. *  ............  * ................................  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2E
	   2E 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00000F30  7C 20 20 20 20	        BYTE "|                     *                        * .. *  ............  *                                   *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 2E
	   2E 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00000FA9  7C 20 20 20 20	        BYTE "|                     *                        ******  ............  * ................................  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00001022  7C 20 20 20 20	        BYTE "|                     *       *********                              *******                                   .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 0000109B  7C 20 20 2E 2E	        BYTE "|  ..............................                                          *                ................   .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00001114  7C 20 20 20 20	        BYTE "|                     *                             .....................  *    *********                      .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 0000118D  7C 20 20 2E 2E	        BYTE "|  .................  *  ...................        .....................  *    *                              .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 20 20 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00001206  7C 20 20 20 20	        BYTE "|                     *                           ***********************+**    *   . .               .  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2B 2A
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 0000127F  7C 20 20 2E 2E	        BYTE "|  .................  *  ...................      *   &                    *    *   . .               .  *     .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 20 20 20
	   2A 20 20 20 26
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000012F8  7C 20 20 20 20	        BYTE "|                     *                           * ...................... *    *   . .               .  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00001371  7C 20 20 20 20	        BYTE "|                     *                           * ...................... *    *   . .     ********  .  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000013EA  7C 20 20 20 20	        BYTE "|                     ***+****                    *         ****************    *   . .     * &...... .  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2B 2A 2A 2A 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 20 26
	   2E 2E 2E 2E 2E
	   2E 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00001463  7C 20 20 2E 2E	        BYTE "|  ........................................                                     *   . .     *         .  *     .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000014DC  7C 20 20 20 20	        BYTE "|                                             *                                 *   . .     *        *****     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00001555  7C 20 20 4F 20	        BYTE "|  O                                          *                                 *   . .     *                  .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000015CE  7C 20 20 2E 2E	        BYTE "|  ........................................   *                                 *     .............................    |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 7C
	   00
 00001647  7C 20 20 20 20	        BYTE "|                                             *    ************************     *                       O              |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 000016C0  7C 20 20 20 20	        BYTE "|                                             *    ........................     +     ............................   & |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 20
	   2B 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 26 20 7C
	   00
 00001739  2D 2D 2D 2D 2D	        BYTE "------------------------------------------------------------------------------------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00

 000017B2 2D 2D 2D 2D 2D	map_3   BYTE "------------------------------------------------------------------------------------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00
 0000182B  7C 20 20 2E 2E	        BYTE "|  .............................. *  .................................................  *   ........................   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 2A
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 2A 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 20 7C
	   00
 000018A4  7C 20 20 4F 20	        BYTE "|  O                              *          ***                           ***        & *                      O       |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 20 20
	   20 20 20 20 20
	   20 26 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 4F 20 20 20
	   20 20 20 20 7C
	   00
 0000191D  7C 20 20 20 20	        BYTE "|           ***********           *  ........***...........................***........  *   .....................      |",0 
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2A 2A 2A 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2A 2A 2A 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 2A 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 20 20 20 7C
	   00
 00001996  7C 20 20 20 20	        BYTE "|                                 *                                                     *                              |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00001A0F  7C 20 20 2E 2E	        BYTE "|  .........    ***    .......... *                                                     *          *                   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 20
	   20 2A 2A 2A 20
	   20 20 20 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00001A88  7C 20 20 20 20	        BYTE "|                     ****                                                  .....................  *                   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00001B01  7C 20 20 20 20	        BYTE "|                     *        *                 **************************                        *        *******    |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 20 20 7C
	   00
 00001B7A  7C 20 20 20 20	        BYTE "|                     *        *                 ++++++++++++++++++++++++++ .......  * ..... *******                   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2B
	   2B 2B 2B 2B 2B
	   2B 2B 2B 2B 2B
	   2B 2B 2B 2B 2B
	   2B 2B 2B 2B 2B
	   2B 2B 2B 2B 2B
	   20 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 2E 2E 2E
	   2E 2E 20 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00001BF3  7C 2A 2A 2A 2A	        BYTE "|**********           *        * &               **************************          *                         .   .   |",0 
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 2A 20 26 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00001C6C  7C 20 20 2E 2E	        BYTE "|  ............................***********           ...... **** ......              *      ................   .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 2E 2E
	   2E 2E 2E 2E 20
	   2A 2A 2A 2A 20
	   2E 2E 2E 2E 2E
	   2E 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00001CE5  7C 20 20 20 20	        BYTE "|                                                         . **** .           *********                         .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2E 20
	   2A 2A 2A 2A 20
	   2E 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00001D5E  7C 20 20 2E 2E	        BYTE "|  .................     ...................              . **** .                                             .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2E 20
	   2A 2A 2A 2A 20
	   2E 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00001DD7  7C 20 20 20 20	        BYTE "|                                                                        ..............        .................   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 20
	   20 20 20 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00001E50  7C 20 20 20 20	        BYTE "|    ****** ........     ...... *********************                 ********************                         .   |",0 
	   2A 2A 2A 2A 2A
	   2A 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 20
	   2E 2E 2E 2E 2E
	   2E 20 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2E 20 20 20 7C
	   00
 00001EC9  7C 20 20 20 20	        BYTE "|         *                                        ...................          *   . .                            .   |",0 
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2E 20 20 20 7C
	   00
 00001F42  7C 2A 2A 2A 2A	        BYTE "|*******  *           *                             .................           *   . .              *             .   |",0 
	   2A 2A 2A 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2E 20 20 20 7C
	   00
 00001FBB  7C 20 20 20 20	        BYTE "|         *           *                                                         *   . .              *         ********|",0 
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 2A 2A 2A 2A
	   2A 2A 2A 2A 7C
	   00
 00002034  7C 20 20 2E 2E	        BYTE "|  .................  *  ..................                                     *   . .              *             .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2E 20 20 20 7C
	   00
 000020AD  7C 20 20 20 20	        BYTE "|                     *                       *           *********             *   . .         &    *             .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 26 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2E 20 20 20 7C
	   00
 00002126  7C 20 20 4F 20	        BYTE "|  O       ***********************            *           *********  &          *   . .    **********************  .   |",0 
	   20 20 20 20 20
	   20 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 20 20 26
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 20 20
	   2E 20 20 20 7C
	   00
 0000219F  7C 20 20 2E 2E	        BYTE "|  ........................................   *    ************************     *     .............................    |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 2A 20 20 20
	   20 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 7C
	   00
 00002218  7C 20 20 20 20	        BYTE "|                                             *              +++                *                       O              |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2B 2B 2B 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00002291  7C 20 20 20 20	        BYTE "|                                             *    ..........***...........     *     ............................     |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2A 2A 2A 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 20 20 7C
	   00
 0000230A  2D 2D 2D 2D 2D	        BYTE "------------------------------------------------------------------------------------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00

 00002383 2D 2D 2D 2D 2D	map_4   BYTE "------------------------------------------------------------------------------------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00
 000023FC  7C 20 20 2E 2E	        BYTE "|  .............................. *  .................................................  *   ........................   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 2A
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 2A 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 20 7C
	   00
 00002475  7C 20 20 4F 20	        BYTE "|  O                              *                                                     *                      O       |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 4F 20 20 20
	   20 20 20 20 7C
	   00
 000024EE  7C 20 20 20 20	        BYTE "|                                 *  .................................................  *   ......................     |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 2A 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 20 20 7C
	   00
 00002567  7C 20 20 20 20	        BYTE "|                                 *                                                     *                              |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 000025E0  7C 20 20 2E 2E	        BYTE "|  .............................. *            ******  ............  *******            *           ******     .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00002659  7C 20 20 20 20	        BYTE "|                     ****                       .. *  ............  * ................................  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2E
	   2E 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000026D2  7C 20 20 20 20	        BYTE "|                     *                        * .. *  ............  *                                   *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 2E
	   2E 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 0000274B  7C 20 20 20 20	        BYTE "|                     *                        ******  ............  * ................................  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000027C4  7C 20 20 20 20	        BYTE "|                     *       *********                              *******                                   .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 0000283D  7C 20 20 2E 2E	        BYTE "|  ..............................                                          *                ................   .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000028B6  7C 20 20 20 20	        BYTE "|                     *                             .....................  *    *********                      .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 0000292F  7C 20 20 2E 2E	        BYTE "|  .................  *  ...................        .....................  *    *                              .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 20 20 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000029A8  7C 20 20 20 20	        BYTE "|                     *                           ***********************+**    *   . .               .  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2B 2A
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00002A21  7C 20 20 2E 2E	        BYTE "|  .................  *  ...................      *   &                    *    *   . .               .  *     .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 20 20 20
	   2A 20 20 20 26
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00002A9A  7C 20 20 20 20	        BYTE "|                     *                           * ...................... *    *   . .               .  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00002B13  7C 20 20 20 20	        BYTE "|                     *                           * ...................... *    *   . .     ********  .  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00002B8C  7C 20 20 20 20	        BYTE "|                     ***+****                    *         ****************    *   . .     * &...... .  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2B 2A 2A 2A 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 20 26
	   2E 2E 2E 2E 2E
	   2E 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00002C05  7C 20 20 2E 2E	        BYTE "|  ........................................                                     *   . .     *         .  *     .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00002C7E  7C 20 20 20 20	        BYTE "|                                             *                                 *   . .     *        *****     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00002CF7  7C 20 20 4F 20	        BYTE "|  O                                          *                                 *   . .     *                  .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00002D70  7C 20 20 2E 2E	        BYTE "|  ........................................   *                                 *     .............................    |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 7C
	   00
 00002DE9  7C 20 20 20 20	        BYTE "|                                             *    ************************     *                       O              |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00002E62  7C 20 20 20 20	        BYTE "|                                             *    ........................     +     ............................   & |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 20
	   2B 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 26 20 7C
	   00
 00002EDB  2D 2D 2D 2D 2D	        BYTE "------------------------------------------------------------------------------------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00

 00002F54 2D 2D 2D 2D 2D	map_5   BYTE "------------------------------------------------------------------------------------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00
 00002FCD  7C 20 20 2E 2E	        BYTE "|  .............................. *  .................................................  *   ........................   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 2A
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 2A 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 20 7C
	   00
 00003046  7C 20 20 4F 20	        BYTE "|  O                              *                                                     *                      O       |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 4F 20 20 20
	   20 20 20 20 7C
	   00
 000030BF  7C 20 20 20 20	        BYTE "|                                 *  .................................................  *   ......................     |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 20 20 2A 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 20 20 7C
	   00
 00003138  7C 20 20 20 20	        BYTE "|                                 *                                                     *                              |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 000031B1  7C 20 20 2E 2E	        BYTE "|  .............................. *            ******  ............  *******            *           ******     .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 0000322A  7C 20 20 20 20	        BYTE "|                     ****                       .. *  ............  * ................................  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2E
	   2E 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000032A3  7C 20 20 20 20	        BYTE "|                     *                        * .. *  ............  *                                   *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 2E
	   2E 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 0000331C  7C 20 20 20 20	        BYTE "|                     *                        ******  ............  * ................................  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 20 20 2A
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00003395  7C 20 20 20 20	        BYTE "|                     *       *********                              *******                                   .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 0000340E  7C 20 20 2E 2E	        BYTE "|  ..............................                                          *                ................   .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00003487  7C 20 20 20 20	        BYTE "|                     *                             .....................  *    *********                      .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00003500  7C 20 20 2E 2E	        BYTE "|  .................  *  ...................        .....................  *    *                              .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 20 20 20
	   20 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   2A 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00003579  7C 20 20 20 20	        BYTE "|                     *                           ***********************+**    *   . .               .  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2B 2A
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000035F2  7C 20 20 2E 2E	        BYTE "|  .................  *  ...................      *   &                    *    *   . .               .  *     .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 2A 20 20
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 20 20 20
	   2A 20 20 20 26
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 0000366B  7C 20 20 20 20	        BYTE "|                     *                           * ...................... *    *   . .               .  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000036E4  7C 20 20 20 20	        BYTE "|                     *                           * ...................... *    *   . .     ********  .  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 0000375D  7C 20 20 20 20	        BYTE "|                     ***+****                    *         ****************    *   . .     * &...... .  *     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2A 2A 2A
	   2B 2A 2A 2A 2A
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 20 26
	   2E 2E 2E 2E 2E
	   2E 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000037D6  7C 20 20 2E 2E	        BYTE "|  ........................................                                     *   . .     *         .  *     .   .   |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 2E 20 20
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 0000384F  7C 20 20 20 20	        BYTE "|                                             *                                 *   . .     *        *****     .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 2A 2A 2A 2A
	   2A 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 000038C8  7C 20 20 4F 20	        BYTE "|  O                                          *                                 *   . .     *                  .   .   |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 2E
	   20 2E 20 20 20
	   20 20 2A 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 20 20 20
	   2E 20 20 20 7C
	   00
 00003941  7C 20 20 2E 2E	        BYTE "|  ........................................   *                                 *     .............................    |",0 
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 20 20
	   20 2A 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 7C
	   00
 000039BA  7C 20 20 20 20	        BYTE "|                                             *    ************************     *                       O              |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 4F
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00003A33  7C 20 20 20 20	        BYTE "|                                             *    ........................     +     ............................   & |",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2A 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   20 20 20 20 20
	   2B 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 20
	   20 20 26 20 7C
	   00
 00003AAC  2D 2D 2D 2D 2D	        BYTE "------------------------------------------------------------------------------------------------------------------------",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00
 00003B25 19			rows_map byte 25   

 00003B26 20 20 20 20 20	main_title byte "     ---------      ---------      ---------     -            -         ---------       -          -  ",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 20
	   20 20 20 20 20
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 20
	   20 20 20 20 20
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 20
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2D 20 20
	   20 20 20 20 20
	   20 20 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 20 20 20 20
	   20 20 20 2D 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 00
 00003B8D  20 20 20 2D 20	           byte "   -          -    -         -    -        -     --          --        -         -      --         -  ",0
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 2D 20
	   20 20 20 20 2D
	   2D 20 20 20 20
	   20 20 20 20 20
	   20 2D 2D 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 2D 2D
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 00
 00003BF4  20 20 20 2D 20	           byte "   -          -    -         -    -              - -        - -        -         -      - -        -  ",0
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 2D 20 20 20
	   20 20 20 20 20
	   2D 20 2D 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 2D 20
	   2D 20 20 20 20
	   20 20 20 20 2D
	   20 20 00
 00003C5B  20 20 20 2D 20	           byte "   -          -    -         -    -              -  -      -  -        -         -      -  -       -  ",0
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 2D 20 20
	   20 20 20 20 2D
	   20 20 2D 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 2D 20
	   20 2D 20 20 20
	   20 20 20 20 2D
	   20 20 00
 00003CC2  20 20 20 2D 20	           byte "   -          -    -         -    -              -   -    -   -        -         -      -   -      -  ",0
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 2D 20
	   20 20 20 2D 20
	   20 20 2D 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 2D 20
	   20 20 2D 20 20
	   20 20 20 20 2D
	   20 20 00
 00003D29  20 20 20 2D 20	           byte "   - --------      - ------- -    -              -    -  -    -        - ------- -      -    -     -  ",0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 20 20
	   20 20 20 20 2D
	   20 2D 2D 2D 2D
	   2D 2D 2D 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 2D 20 20
	   20 20 2D 20 20
	   20 20 20 20 20
	   20 2D 20 2D 2D
	   2D 2D 2D 2D 2D
	   20 2D 20 20 20
	   20 20 20 2D 20
	   20 20 20 2D 20
	   20 20 20 20 2D
	   20 20 00
 00003D90  20 20 20 2D 20	           byte "   -               -         -    -              -     --     -        -         -      -     -    -  ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 20
	   2D 2D 20 20 20
	   20 20 2D 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 2D 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 00
 00003DF7  20 20 20 2D 20	           byte "   -               -         -    -              -            -        -         -      -      -   -  ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2D 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 2D 20
	   20 20 20 20 20
	   2D 20 20 20 2D
	   20 20 00
 00003E5E  20 20 20 2D 20	           byte "   -               -         -    -              -            -        -         -      -       -  -  ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2D 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 2D 20
	   20 20 20 20 20
	   20 2D 20 20 2D
	   20 20 00
 00003EC5  20 20 20 2D 20	           byte "   -               -         -    -        -     -            -        -         -      -        - -  ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 2D 20
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2D 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 2D 20
	   20 20 20 20 20
	   20 20 2D 20 2D
	   20 20 00
 00003F2C  20 20 20 2D 20	           byte "   -               -         -     ---------     -            -        -         -      -         --  ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 2D
	   20 20 20 20 20
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 20
	   20 20 20 20 2D
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 2D 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 20 20
	   20 2D 20 20 20
	   20 20 20 2D 20
	   20 20 20 20 20
	   20 20 20 2D 2D
	   20 20 00
 00003F93  20 20 20 20 20	           byte "                                                                                                      ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 00


				;--------------------screen texts----------------------
 00003FFA 50 72 65 73 73	endStr byte "Press ESCAPE to exit game", 0
	   20 45 53 43 41
	   50 45 20 74 6F
	   20 65 78 69 74
	   20 67 61 6D 65
	   00
 00004014 20 20 20 20 20	instructions byte "       Press UP ARROW to move UP     ", 0
	   20 20 50 72 65
	   73 73 20 55 50
	   20 41 52 52 4F
	   57 20 74 6F 20
	   6D 6F 76 65 20
	   55 50 20 20 20
	   20 20 00
 0000403A  20 20 20 20 20	             byte "                              ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00004059  20 20 20 20 50	             byte "    Press DOWN ARROW to move DOWN    ", 0
	   72 65 73 73 20
	   44 4F 57 4E 20
	   41 52 52 4F 57
	   20 74 6F 20 6D
	   6F 76 65 20 44
	   4F 57 4E 20 20
	   20 20 00
 0000407F  20 20 20 20 20	             byte "                              ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 0000409E  20 20 20 20 50	             byte "    Press LEFT ARROW to move LEFT  ", 0
	   72 65 73 73 20
	   4C 45 46 54 20
	   41 52 52 4F 57
	   20 74 6F 20 6D
	   6F 76 65 20 4C
	   45 46 54 20 20
	   00
 000040C2  20 20 20 20 20	             byte "                              ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000040E1  20 20 20 20 50	             byte "    Press RIGHT ARROW to move RIGHT ", 0
	   72 65 73 73 20
	   52 49 47 48 54
	   20 41 52 52 4F
	   57 20 74 6F 20
	   6D 6F 76 65 20
	   52 49 47 48 54
	   20 00
 00004106  20 20 20 20 20	             byte "                              ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00004125  20 20 20 20 20	             byte "      ESCAPE KEY to go back   ", 0
	   20 45 53 43 41
	   50 45 20 4B 45
	   59 20 74 6F 20
	   67 6F 20 62 61
	   63 6B 20 20 20
	   00

 00004144 20 20 20 20 20	pauseString  byte "     1. View Instructions     ", 0
	   31 2E 20 56 69
	   65 77 20 49 6E
	   73 74 72 75 63
	   74 69 6F 6E 73
	   20 20 20 20 20
	   00
 00004163  20 20 20 20 20	             byte "                              ", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00004182  20 20 20 20 20	             byte "      ESCAPE key to resume    ", 0
	   20 45 53 43 41
	   50 45 20 6B 65
	   79 20 74 6F 20
	   72 65 73 75 6D
	   65 20 20 20 20
	   00

 000041A1 20 20 20 20 20	spaces byte "                                        ", 0  
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000041CA 09			instructions_rows byte 9
 000041CB 0C			main_title_rows byte 12  
 000041CC 03			pause_rows byte 3
				;-------------------------------------------------------  
				;-----------------collision variables-------------------
 000041CD 00			boolCollision db 0  
 000041CE 00			coinCollision db 0
 000041CF 00			enemyCollision db 0
 000041D0 00			teleportCollision db 0
 000041D1 00			hiddenPathCollision db 0
 000041D2 00			fruitCollision db 0
 000041D3 00			mapStarted db 0
				;-------------------------------------------------------  
 000041D4 00			temp byte ?
 000041D5 00000000		tempDouble dd ?

				;-----------------Michellanoeous text-------------------
 000041D9 53 63 6F 72 65	strScore BYTE "Score: ", 0
	   3A 20 00
 000041E1 31 2E 20 53 74	strStartGame byte "1. Start new game", 0
	   61 72 74 20 6E
	   65 77 20 67 61
	   6D 65 00
 000041F3 32 2E 20 49 6E	strInstructions byte "2. Instructions", 0
	   73 74 72 75 63
	   74 69 6F 6E 73
	   00
 00004203 33 2E 20 45 78	strExitGame byte "3. Exit game", 0
	   69 74 20 67 61
	   6D 65 00
 00004210 4C 69 76 65 73	strLives BYTE "Lives: ", 0
	   3A 20 00
 00004218 4C 65 76 65 6C	strLevel BYTE "Level: ", 0
	   3A 20 00
 00004220 50 6C 61 79 65	strUserName byte "Player Name: ", 0
	   72 20 4E 61 6D
	   65 3A 20 00
 0000422E 45 6E 74 65 72	userNameInput byte "Enter your name: ", 0
	   20 79 6F 75 72
	   20 6E 61 6D 65
	   3A 20 00
				;-------------------------------------------------------------

				;-----------data variables for player, ghost and game---------
 00004240 00			inputChar BYTE ?
 00004241  0000000A [		userName byte 10 dup(0)
	    00
	   ]
 0000424B 00000000		totalCoins dd 0
 0000424F 00000000		totalScore dd 0
 00004253 00000000		numCoinsCollected dd 0
 00004257 00000000		score dd 0
 0000425B 00			endGame byte 0
 0000425C 14			xPos BYTE 20
 0000425D 14			yPos BYTE 20
 0000425E 3C			playerCh byte '<'
 0000425F 05			numGhosts db 5
 00004260 03			lives db 3
 00004261 0000			timer dw 0
 00004263 00FA			lvlSpeed dw 250
 00004265 01			level byte 1
 00004266 00			numGhostsInLevel db 0
 00004267 DB DB DB DB DB	ghostChar byte 219, 219, 219, 219, 219
 0000426C 00 03 01 02 00	ghostMovement byte 0, 3, 1, 2, 0
 00004271 3C 62 3F 74 0A	ghostXPos byte 60, 98, 63, 116, 10
 00004276 3C 62 3F 74 0A	ghostXPosOriginal byte 60, 98, 63, 116, 10          ;original positions will be used to reset ghost positions after the level completes
 0000427B 04 02 0F 17 04	ghostYPos byte 4,   2, 15,  23, 4
 00004280 04 02 0F 17 04	ghostYPosOriginal byte 4,   2, 15,  23, 4
 00004285 52 47 43 4D 57	ghostColor byte 'R', 'G', 'C', 'M', 'W' 
				;-------------------------------------------------------


				;--------------------file handling----------------------
 0000428A  00000078 [		playerdata db 120 dup (0)
	    00
	   ]
 00004302 73 63 6F 72 65	fileName db "scores.txt", 0
	   73 2E 74 78 74
	   00
 0000430D  0000000A [		strUsernameFile db 10 dup(0)
	    00
	   ]
 00004317 00000000		fileHandle dd ?
 0000431B 00			numPlayers db 0
 0000431C  00000011 [		tempString db 17 dup (0)
	    00
	   ]
 0000432D 0A			lineBreak db 0ah
 0000432E  00000004 [		arrScore db 4 dup(0)
	    00
	   ]
 00004332 00			levelStr db 0
 00004333 25			terminator1 db '%'
 00004334 26			terminator2 db '&'
 00004335 20			space db ' '
 00004336 00			len db 0
				;-------------------------------------------------------

				;-----------------Block counts per level for roll number 2578-----------------
 00004337 02 05 05 03		levelBlockCounts db 2, 5, 5, 3
 0000433B 00			blockCount db 0

 0000433C 00			powerMode db 0         ; 1 if power mode is active, 0 otherwise
 0000433D 0000			powerModeTimer dw 0    ; counts down the duration of power mode
 = 000000C8			POWER_MODE_DURATION equ 200 ; adjust as needed for ~20 seconds
 0000433F 00000032		powerPelletPoints dd 50 ; points for eating a ghost in power mode

 00000000			.code
 00000000			main PROC
				    ;-----------------initial setup-----------------
 00000000  B8 FFFFFFF5		    mov eax,STD_OUTPUT_HANDLE
				    invoke getStdhandle, eax
 00000005  50		   *	    push   eax
 00000006  E8 00000000 E   *	    call   GetStdHandle
 0000000B  BE 00000000 R	    mov esi, offset ConsoleInfo
				    invoke setConsoleCursorInfo, eax, esi           ;hiding the cursor
 00000010  56		   *	    push   esi
 00000011  50		   *	    push   eax
 00000012  E8 00000000 E   *	    call   SetConsoleCursorInfo
 00000017  E8 0000062A		    call drawGameName
 0000001C  E8 00000679		    call inputName
 00000021  E8 000006AF		    call drawMainScreen
 00000026			    decideNewLevel:
 00000026  E8 00000466		    call decideLevel
				    
				    ;------------------------------------------------
 0000002B  80 3D 0000425B R	    cmp endGame, 1
	   01
 00000032  0F 84 0000043E	    je exitGame
 00000038  C6 05 000041D3 R	    mov mapStarted, 0
	   00
 0000003F  E8 0000097A		    call drawBoard
 00000044  C6 05 000041D3 R	    mov mapStarted, 1
	   01
 0000004B  C6 05 0000425C R	    mov xPos, 4
	   04
 00000052  C6 05 0000425D R	    mov yPos, 23
	   17
 00000059  E8 00000000 E	    call gotoxy
 0000005E  E8 00000A3D		    call UpdatePlayer
 00000063  E8 00000A12		    call DrawPlayer
 00000068  66| C7 05		    mov timer, 0
	   00004261 R
	   0000
				    ;----------main game logic starts here--------------
 00000071			    gameLoop:
 00000071  B8 00000000		    mov eax, 0
 00000076  BB 00000000		    mov ebx, 0
 0000007B  B9 00000000		    mov ecx, 0
 00000080  BA 00000000		    mov edx, 0
				    ; Power mode timer logic
 00000085  A0 0000433C R	    mov al, powerMode
 0000008A  3C 01		    cmp al, 1
 0000008C  75 24		    jne skipPowerModeTimer
 0000008E  66| A1		    mov ax, powerModeTimer
	   0000433D R
 00000094  66| 83 F8 00		    cmp ax, 0
 00000098  74 11		    je disablePowerMode
 0000009A  66| FF 0D		    dec powerModeTimer
	   0000433D R
 000000A1  66| 83 3D		    cmp powerModeTimer, 0
	   0000433D R 00
 000000A9  75 07		    jne skipPowerModeTimer
 000000AB			    disablePowerMode:
 000000AB  C6 05 0000433C R	    mov powerMode, 0
	   00
 000000B2			    skipPowerModeTimer:
 000000B2  66| FF 05		    inc timer
	   00004261 R
 000000B9  A1 0000424B R	        mov eax, totalCoins
 000000BE  39 05 00004253 R	        cmp numCoinsCollected, eax 
 000000C4  75 0B		        jne continueLevel
 000000C6  FE 05 00004265 R	        inc level
 000000CC  E9 FFFFFF55		        jmp decideNewLevel
 000000D1			        continueLevel:
 000000D1  E8 0000133E		        call resetCollisionVars
 000000D6  66| A1		        mov ax, lvlSpeed
	   00004263 R
 000000DC  66| 39 05		        cmp timer, ax               ;if timer reaches the level speed, ghosts update their positions 
	   00004261 R
 000000E3  75 1B		        jne noGhostUpdate
 000000E5  E8 000009CF		        call updateGhost
 000000EA  66| C7 05		        mov timer, 0
	   00004261 R
	   0000
				        ;check if lives have run out
 000000F3  80 3D 00004260 R	        cmp lives, 0
	   00
 000000FA  0F 86 00000376	        jbe exitGame
				        
 00000100			        noGhostUpdate:
 00000100  E8 00001214		        call updateScore
 00000105  E8 00001239		        call updateLives
 0000010A  E8 0000125C		        call updateLevel
 0000010F  E8 000010E2		        call drawGhost
 00000114  8A 15 0000425C R	        mov dl, xPos
 0000011A  8A 35 0000425D R	        mov dh, yPos
 00000120  52			        push edx
 00000121  E8 00001147		        call checkPlayerEnemeyCollision                     ;after updating ghost positions, check collision with player
 00000126  5A			        pop edx
 00000127  80 3D 000041CF R	        cmp enemyCollision, 1
	   01
 0000012E  0F 84 000002FB	        je playerDead
 00000134  E8 00000000 E	        call readKey                                        ;taking user input 
 00000139  75 05		        jnz move
 0000013B  E9 FFFFFF31		        jmp gameLoop
 00000140			        move:
 00000140  E8 000012CF		        call resetCollisionVars
 00000145  A2 00004240 R	        mov inputChar, al
				    
 0000014A  80 3D 00004240 R	        cmp inputChar,"x"                               
	   78
 00000151  0F 84 0000031F	        je exitGame

 00000157  66| 83 FA 1B		        cmp dx, VK_ESCAPE
 0000015B  74 29		        je pauseMenu
 0000015D  66| 83 FA 26		        cmp dx, VK_UP
 00000161  74 32		        je moveUp

 00000163  66| 83 FA 28		        cmp dx, VK_DOWN
 00000167  0F 84 000000CE	        je moveDown

 0000016D  66| 83 FA 25		        cmp dx, VK_LEFT
 00000171  0F 84 00000163	        je moveLeft

 00000177  66| 83 FA 27		        cmp dx, VK_RIGHT
 0000017B  0F 84 000001FF	        je moveRight
 00000181  E9 FFFFFEEB		        jmp gameLoop
 00000186			        pauseMenu:
 00000186  E8 000006C5		        call pauseMenuScreen
 0000018B  E8 0000082E		        call drawBoard
 00000190  E9 FFFFFEDC		        jmp gameLoop
				        ;-------------------------------------------------------------------------;
 00000195			        moveUp:                                 ;if the player intends to move up 
 00000195  FE 0D 0000425D R	            dec yPos
 0000019B  0F B6 1D		            movzx ebx, yPos
	   0000425D R
 000001A2  A1 0000000C R	            mov eax, mapLength
 000001A7  0F B6 0D		            movzx ecx, xPos
	   0000425C R
 000001AE  8B 35 00000008 R	            mov esi, map
 000001B4  56			            push esi
 000001B5  51			            push ecx
 000001B6  53			            push ebx
 000001B7  50			            push eax
 000001B8  E8 000011D6		            call checkCollision                 ;different checks to ensure that player is not colliding 
 000001BD  58			            pop eax
 000001BE  5B			            pop ebx 
 000001BF  59			            pop ecx
 000001C0  5E			            pop esi
 000001C1  FE 05 0000425D R	            inc yPos
 000001C7  80 3D 000041CE R	            cmp coinCollision, 1
	   01
 000001CE  75 0E		            jne FruitUp
 000001D0  FF 05 00004257 R	            inc score                       ;if player has collected a coin 
 000001D6  FF 05 00004253 R	            inc numCoinsCollected
 000001DC  EB 19		            jmp spaceUp
 000001DE			            FruitUp:
 000001DE  80 3D 00004265 R	            cmp level, 2                    ;players will only be given the opportuinity to collect fruits from level 2 and up
	   02
 000001E5  7C 14		            jl playerUp
 000001E7  80 3D 000041D2 R	            cmp fruitCollision, 1
	   01
 000001EE  75 0B		            jne playerUp
 000001F0  83 05 00004257 R	            add score, 5                    ;if level is 2 and above and player has collected fruits, add to the score
	   05
 000001F7			            spaceUp:
 000001F7  B0 20		            mov al, ' '                     ;writing space in the place of collected coin on the map
 000001F9  88 06		            mov byte ptr [esi], al
 000001FB			            playerUp:
 000001FB  80 3D 000041CD R	            cmp boolCollision, 1            ;if the player has collided with the enemy after moving 
	   01
 00000202  0F 84 00000217	            je enemyPlayerCollision
 00000208  E8 00000893		            call UpdatePlayer
 0000020D  80 3D 0000425D R	            cmp yPos, 1
	   01
 00000214  7E 06		            jle continue_up
 00000216  FE 0D 0000425D R	            dec yPos
 0000021C			            continue_up:                    ;if all the checks are passed, update the player positions
 0000021C  80 3D 00004265 R	            cmp level, 2
	   02
 00000223  7C 05		            jl noTeleportUp
 00000225  E8 00001215		            call checkTeleport  
 0000022A			            noTeleportUp:
 0000022A  C6 05 0000425E R	            mov playerCh, 'v'
	   76
 00000231  E8 00000844		            call DrawPlayer
 00000236  E9 000001E4		        jmp enemyPlayerCollision

				        ;-------------------------------------------------------------------------;
				        ;----------------------------same game logic as above---------------------
 0000023B			        moveDown:
 0000023B  FE 05 0000425D R	            inc yPos
 00000241  0F B6 1D		            movzx ebx, yPos
	   0000425D R
 00000248  A1 0000000C R	            mov eax, mapLength
 0000024D  0F B6 0D		            movzx ecx, xPos
	   0000425C R
 00000254  8B 35 00000008 R	            mov esi, map
 0000025A  56			            push esi
 0000025B  51			            push ecx
 0000025C  53			            push ebx
 0000025D  50			            push eax
 0000025E  E8 00001130		            call checkCollision
 00000263  58			            pop eax
 00000264  5B			            pop ebx 
 00000265  59			            pop ecx
 00000266  5E			            pop esi
 00000267  FE 0D 0000425D R	            dec yPos
 0000026D  80 3D 000041CE R	            cmp coinCollision, 1
	   01
 00000274  75 0E		            jne FruitDown
 00000276  FF 05 00004257 R	            inc score
 0000027C  FF 05 00004253 R	            inc numCoinsCollected
 00000282  EB 12		            jmp spaceDown
 00000284			            FruitDown:
 00000284  80 3D 00004265 R	            cmp level, 2
	   02
 0000028B  7C 0D		            jl playerDown
 0000028D  80 3D 000041D2 R	            cmp fruitCollision, 1
	   01
 00000294  75 04		            jne playerDown
 00000296			            spaceDown:
 00000296  B0 20		            mov al, ' '
 00000298  88 06		            mov byte ptr [esi], al
 0000029A			            playerDown:
 0000029A  80 3D 000041CD R	            cmp boolCollision, 1
	   01
 000002A1  0F 84 00000178	            je enemyPlayerCollision
 000002A7  E8 000007F4		            call UpdatePlayer
 000002AC  80 3D 0000425D R	            cmp yPos, 23
	   17
 000002B3  7D 06		            jge continue_down
 000002B5  FE 05 0000425D R	            inc yPos
 000002BB			            continue_down:
 000002BB  80 3D 00004265 R	            cmp level, 2
	   02
 000002C2  7C 05		            jl noTeleportDown
 000002C4  E8 00001176		            call checkTeleport  
 000002C9			            noTeleportDown:
 000002C9  C6 05 0000425E R	            mov playerCh, '^'
	   5E
 000002D0  E8 000007A5		            call DrawPlayer
 000002D5  E9 00000145		            jmp enemyPlayerCollision

				        ;-------------------------------------------------------------------------;
				        ;----------------------------same game logic as above---------------------
 000002DA			        moveLeft:
 000002DA  FE 0D 0000425C R	            dec xPos
 000002E0  0F B6 1D		            movzx ebx, yPos
	   0000425D R
 000002E7  A1 0000000C R	            mov eax, mapLength
 000002EC  0F B6 0D		            movzx ecx, xPos
	   0000425C R
 000002F3  8B 35 00000008 R	            mov esi, map
 000002F9  56			            push esi
 000002FA  51			            push ecx
 000002FB  53			            push ebx
 000002FC  50			            push eax
 000002FD  E8 00001091		            call checkCollision
 00000302  58			            pop eax
 00000303  5B			            pop ebx 
 00000304  59			            pop ecx
 00000305  5E			            pop esi    
 00000306  FE 05 0000425C R	            inc xPos
 0000030C  80 3D 000041CE R	            cmp coinCollision, 1
	   01
 00000313  75 0E		            jne fruitLeft
 00000315  FF 05 00004257 R	            inc score
 0000031B  FF 05 00004253 R	            inc numCoinsCollected
 00000321  EB 19		            jmp spaceLeft
				         
 00000323			            fruitLeft:
 00000323  80 3D 00004265 R	            cmp level, 2
	   02
 0000032A  7C 14		            jl playerLeft
 0000032C  80 3D 000041D2 R	            cmp fruitCollision, 1
	   01
 00000333  75 0B		            jne playerLeft
 00000335  83 05 00004257 R	            add score, 5
	   05
 0000033C			            spaceLeft:
 0000033C  B0 20		            mov al, ' '
 0000033E  88 06		            mov byte ptr [esi], al
 00000340			            playerLeft:
 00000340  80 3D 000041CD R	            cmp boolCollision, 1
	   01
 00000347  0F 84 000000D2	            je enemyPlayerCollision
 0000034D  E8 0000074E		            call UpdatePlayer
 00000352  80 3D 0000425C R	            cmp xPos, 1
	   01
 00000359  7E 06		            jle continue_left
 0000035B  FE 0D 0000425C R	            dec xPos
 00000361			            continue_left:
 00000361  80 3D 00004265 R	            cmp level, 2
	   02
 00000368  7C 05		            jl noTeleportLeft
 0000036A  E8 000010D0		            call checkTeleport  
 0000036F			            noTeleportLeft:
 0000036F  C6 05 0000425E R	            mov playerCh, '>'
	   3E
 00000376  E8 000006FF		            call DrawPlayer
 0000037B  E9 0000009F		            jmp enemyPlayerCollision

				        ;-------------------------------------------------------------------------;
				        ;----------------------------same game logic as above---------------------
 00000380			        moveRight:
 00000380  FE 05 0000425C R	            inc xPos
 00000386  0F B6 1D		            movzx ebx, yPos
	   0000425D R
 0000038D  A1 0000000C R	            mov eax, mapLength
 00000392  0F B6 0D		            movzx ecx, xPos
	   0000425C R
 00000399  8B 35 00000008 R	            mov esi, map
 0000039F  56			            push esi
 000003A0  51			            push ecx
 000003A1  53			            push ebx
 000003A2  50			            push eax
 000003A3  E8 00000FEB		            call checkCollision
 000003A8  58			            pop eax
 000003A9  5B			            pop ebx 
 000003AA  59			            pop ecx
 000003AB  5E			            pop esi    
 000003AC  FE 0D 0000425C R	            dec xPos
 000003B2  80 3D 000041CE R	            cmp coinCollision, 1
	   01
 000003B9  75 0E		            jne fruitRight
 000003BB  FF 05 00004257 R	            inc score
 000003C1  FF 05 00004253 R	            inc numCoinsCollected
 000003C7  EB 19		            jmp spaceRight
 000003C9			            fruitRight:
 000003C9  80 3D 00004265 R	            cmp level, 2
	   02
 000003D0  7C 14		            jl playerRight
 000003D2  80 3D 000041D2 R	            cmp fruitCollision, 1
	   01
 000003D9  75 0B		            jne playerRight
 000003DB  83 05 00004257 R	            add score, 5
	   05
 000003E2			            spaceRight:
 000003E2  B0 20		            mov al, ' '
 000003E4  88 06		            mov byte ptr [esi], al
 000003E6			            playerRight:
 000003E6  80 3D 000041CD R	            cmp boolCollision, 1
	   01
 000003ED  74 30		            je enemyPlayerCollision
 000003EF  E8 000006AC		            call UpdatePlayer
 000003F4  80 3D 0000425C R	            cmp xPos, 118
	   76
 000003FB  7D 06		            jge continue_right
 000003FD  FE 05 0000425C R	            inc xPos
 00000403			            continue_Right:
 00000403  80 3D 00004265 R	            cmp level, 2
	   02
 0000040A  7C 05		            jl noTeleportRight
 0000040C  E8 0000102E		            call checkTeleport  
 00000411			            noTeleportRight:
 00000411  C6 05 0000425E R	            mov playerCh, '<'
	   3C
 00000418  E8 0000065D		            call DrawPlayer
 0000041D  EB 00		            jmp enemyPlayerCollision
				        
				    ;this checks if the player has collided with the enemy after the player has moved
 0000041F			    enemyPlayerCollision:
 0000041F  52			        push edx
 00000420  E8 00000E48		        call checkPlayerEnemeyCollision
 00000425  5A			        pop edx
 00000426  80 3D 000041CF R	        cmp enemyCollision, 1
	   01
 0000042D  75 36		        jne continueNormal
 0000042F			        playerDead:             
 0000042F  E8 0000066C		        call UpdatePlayer               ;resetting player positions on the screen
 00000434  C6 05 0000425C R	        mov xPos, 4
	   04
 0000043B  C6 05 0000425D R	        mov yPos, 23
	   17
 00000442  E8 00000659		        call UpdatePlayer
 00000447  E8 0000062E		        call drawPlayer
 0000044C  B8 0000012C		        mov eax, 300
 00000451  E8 00000000 E	        call Delay
 00000456  E8 00000000 E	        call Delay
 0000045B  E8 00000000 E	        call Delay
 00000460  E8 00000000 E	        call Delay
 00000465			        continueNormal:                     ;the player has not collided, the move is valid 
 00000465  8A 15 0000425C R	        mov dl, xPos
 0000046B  8A 35 0000425D R	        mov dh, yPos
 00000471  E9 FFFFFBFB		    jmp gameLoop

 00000476			    exitGame:
 00000476  E8 00001053		    call writeScores                ;writing scores in the file 
 0000047B  E8 00000000 E	    call clrscr
 00000480  E8 00000486		    call endScreen                  
 00000485  E8 00000000 E	    call clrscr
				    exit
 0000048A  6A 00	   *	    push   +000000000h
 0000048C  E8 00000000 E   *	    call   ExitProcess
 00000491			main ENDP

				;main func to decide level
 00000491			decideLevel proc
				;based on each level, the mechanics of the game, i.e. the map, enemy speed, number of ghosts in level is different
				;deciding the level and setting up the features is done in this function
 00000491  80 3D 00004265 R	    cmp level, 1
	   01
 00000498  74 42		    je Level1
 0000049A  80 3D 00004265 R	    cmp level, 2
	   02
 000004A1  74 74		    je Level2
 000004A3  80 3D 00004265 R	    cmp level, 3
	   03
 000004AA  0F 84 000000A2	    je Level3
 000004B0  80 3D 00004265 R	    cmp level, 4
	   04
 000004B7  0F 84 000000CD	    je Level4
 000004BD  80 3D 00004265 R	    cmp level, 5
	   05
 000004C4  0F 84 000000F8	    je Level5
 000004CA  80 3D 00004265 R	    cmp level, 5
	   05
 000004D1  0F 8F 00000161	    jg gameComplete
 000004D7  E9 00000169		    jmp endDecideLevel

 000004DC			    Level1:
 000004DC  C6 05 00004260 R	    mov lives, 3
	   03
 000004E3  BE 00000010 R	    mov esi, offset map_1
 000004E8  89 35 00000008 R	    mov map, esi
 000004EE  B8 00000079		    mov eax, lengthof map_1
 000004F3  A3 0000000C R	    mov mapLength, eax
 000004F8  C6 05 00004266 R	    mov numGhostsInLevel, 3
	   03
 000004FF  66| C7 05		    mov lvlSpeed, 300
	   00004263 R
	   012C
 00000508  A0 00004337 R	    mov al, levelBlockCounts[0]
 0000050D  A2 0000433B R	    mov blockCount, al
 00000512  E9 0000012E		    jmp endDecideLevel

 00000517			    Level2:
 00000517  C6 05 00004260 R	    mov lives, 3
	   03
 0000051E  BE 00000BE1 R	    mov esi, offset map_2
 00000523  89 35 00000008 R	    mov map, esi
 00000529  B8 00000079		    mov eax, lengthof map_2
 0000052E  C6 05 00004266 R	    mov numGhostsInLevel, 4
	   04
 00000535  A3 0000000C R	    mov mapLength, eax
 0000053A  66| C7 05		    mov lvlSpeed, 150
	   00004263 R
	   0096
 00000543  A0 00004338 R	    mov al, levelBlockCounts[1]
 00000548  A2 0000433B R	    mov blockCount, al
 0000054D  E9 0000009E		    jmp addScore

 00000552			    Level3:
 00000552  C6 05 00004260 R	    mov lives, 3
	   03
 00000559  BE 000017B2 R	    mov esi, offset map_3
 0000055E  89 35 00000008 R	    mov map, esi
 00000564  B8 00000079		    mov eax, lengthof map_3
 00000569  C6 05 00004266 R	    mov numGhostsInLevel, 6
	   06
 00000570  A3 0000000C R	    mov mapLength, eax
 00000575  66| C7 05		    mov lvlSpeed, 50
	   00004263 R
	   0032
 0000057E  A0 00004339 R	    mov al, levelBlockCounts[2]
 00000583  A2 0000433B R	    mov blockCount, al
 00000588  EB 66		    jmp addScore

 0000058A			    Level4:
 0000058A  C6 05 00004260 R	    mov lives, 3
	   03
 00000591  BE 00002383 R	    mov esi, offset map_4
 00000596  89 35 00000008 R	    mov map, esi
 0000059C  B8 00000079		    mov eax, lengthof map_4
 000005A1  C6 05 00004266 R	    mov numGhostsInLevel, 7
	   07
 000005A8  A3 0000000C R	    mov mapLength, eax
 000005AD  66| C7 05		    mov lvlSpeed, 40
	   00004263 R
	   0028
 000005B6  A0 0000433A R	    mov al, levelBlockCounts[3]
 000005BB  A2 0000433B R	    mov blockCount, al
 000005C0  EB 2E		    jmp addScore

 000005C2			    Level5:
 000005C2  C6 05 00004260 R	    mov lives, 3
	   03
 000005C9  BE 00002F54 R	    mov esi, offset map_5
 000005CE  89 35 00000008 R	    mov map, esi
 000005D4  B8 00000079		    mov eax, lengthof map_5
 000005D9  C6 05 00004266 R	    mov numGhostsInLevel, 7
	   07
 000005E0  66| C7 05		    mov lvlSpeed, 30
	   00004263 R
	   001E
 000005E9  A3 0000000C R	    mov mapLength, eax
 000005EE  EB 00		    jmp addScore

 000005F0			    addScore:
 000005F0  8B 1D 00004253 R	    mov ebx, numCoinsCollected
 000005F6  C7 05 0000424B R	    mov totalCoins, 0
	   00000000
 00000600  01 1D 00004257 R	    add score, ebx              ;adding to the total score
 00000606  C7 05 00004253 R	    mov numCoinsCollected, 0
	   00000000
 00000610  BE 00000000		    mov esi, 0
 00000615  0F B6 0D		    movzx ecx, numGhostsInLevel
	   00004266 R
 0000061C			    resetGhosts:
 0000061C  8A 86 00004276 R	    mov al, ghostXPosOriginal[esi]          ;resetting ghost positions to their original coordinates for the new level
 00000622  8A A6 00004280 R	    mov ah, ghostYPosOriginal[esi]
 00000628  88 86 00004271 R	    mov ghostXPos[esi], al
 0000062E  88 A6 0000427B R	    mov ghostYPos[esi], ah
 00000634  E2 E6		    loop resetGhosts
 00000636  EB 0D		    jmp endDecideLevel

 00000638			    gameComplete:
 00000638  C6 05 0000425B R	    mov endGame, 1
	   01
 0000063F  FE 0D 00004265 R	    dec level

 00000645			endDecideLevel:
 00000645  C3			ret
 00000646			decideLevel endp

				;---------------------------different screen functions-------------------------
				;to draw game name on the screen
 00000646			drawGameName proc
 00000646  E8 00000000 E	    call clrscr
 0000064B  0F B6 0D		    movzx ecx, main_title_rows
	   000041CB R
 00000652  BE 00003B26 R	    mov esi, offset main_title
 00000657  B2 08		    mov dl, 8
 00000659  B6 05		    mov dh, 5
 0000065B			    mainScreen:
 0000065B  E8 00000000 E	    call gotoxy
 00000660  8B D9		    mov ebx, ecx
 00000662  B9 00000067		    mov ecx, lengthof main_title
 00000667			        innerMainScreen:
 00000667  B8 0000000F		            mov eax, white
 0000066C  E8 00000000 E	            call setTextColor
 00000671  8A 06		            mov al, byte ptr [esi]
 00000673  3C 2D		            cmp al, '-'
 00000675  75 14		            jne writeMainScreen
 00000677  A2 000041D4 R	            mov temp, al
 0000067C  B8 00000099		            mov eax, lightBlue+(lightBlue*16)
 00000681  E8 00000000 E	            call setTextColor
 00000686  A0 000041D4 R	            mov al, temp
 0000068B			            writeMainScreen:
 0000068B  E8 00000000 E	            call writeChar
 00000690  46			            inc esi
 00000691  E2 D4		        loop innerMainScreen
 00000693  FE C6		    inc dh
 00000695  8B CB		    mov ecx, ebx
 00000697  E2 C2		    loop mainScreen
				    
 00000699  C3			ret
 0000069A			drawGameName endp

				;to take user input
 0000069A			inputName proc
 0000069A  B2 32		    mov dl, 50
 0000069C  B6 15		    mov dh, 21
 0000069E  E8 00000000 E	    call gotoxy
 000006A3  B8 0000000A		    mov eax, lightGreen 
 000006A8  E8 00000000 E	    call setTextColor
 000006AD  BA 0000422E R	    mov edx, offset userNameInput
 000006B2  E8 00000000 E	    call writeString
 000006B7  B8 0000000C		    mov eax, lightRed 
 000006BC  E8 00000000 E	    call setTextColor
 000006C1  BA 00004241 R	    mov edx, offset userName
 000006C6  B9 00000009		    mov ecx, sizeof userName - 1
 000006CB  E8 00000000 E	    call readString
 000006D0  E8 00000000 E	    call clrscr
 000006D5			inputName endp

				;draw the main screen
 000006D5			drawMainScreen proc
 000006D5			    drawMain:
 000006D5  0F B6 0D		    movzx ecx, main_title_rows
	   000041CB R
 000006DC  BE 00003B26 R	    mov esi, offset main_title
 000006E1  B2 08		    mov dl, 8
 000006E3  B6 01		    mov dh, 1
 000006E5			    mainScreen:
 000006E5  E8 00000000 E	    call gotoxy
 000006EA  8B D9		    mov ebx, ecx
 000006EC  B9 00000067		    mov ecx, lengthof main_title
 000006F1			        innerMainScreen:
 000006F1  B8 0000000F		            mov eax, white
 000006F6  E8 00000000 E	            call setTextColor
 000006FB  8A 06		            mov al, byte ptr [esi]
 000006FD  3C 2D		            cmp al, '-'
 000006FF  75 14		            jne writeMainScreen
 00000701  A2 000041D4 R	            mov temp, al
 00000706  B8 000000AA		            mov eax, lightGreen+(lightGreen*16)
 0000070B  E8 00000000 E	            call setTextColor
 00000710  A0 000041D4 R	            mov al, temp
 00000715			            writeMainScreen:
 00000715  E8 00000000 E	            call writeChar
 0000071A  46			            inc esi
 0000071B  E2 D4		        loop innerMainScreen
 0000071D  FE C6		    inc dh
 0000071F  8B CB		    mov ecx, ebx
 00000721  E2 C2		    loop mainScreen

				    


 00000723			    takeMainMenuInput:
 00000723  B8 0000000C		        mov eax, lightRed
 00000728  E8 00000000 E	        call SetTextColor
 0000072D  B2 35		        mov dl, 53
 0000072F  B6 0F		        mov dh, 15
 00000731  E8 00000000 E	        call gotoxy
 00000736  BA 000041E1 R	        mov edx, offset strStartGame
 0000073B  E8 00000000 E	        call writeString


 00000740  B2 37		        mov dl, 55
 00000742  B6 11		        mov dh, 17
 00000744  E8 00000000 E	        call gotoxy
 00000749  BA 000041F3 R	        mov edx, offset strInstructions
 0000074E  E8 00000000 E	        call writeString


 00000753  B2 37		        mov dl, 55
 00000755  B6 13		        mov dh, 19
 00000757  E8 00000000 E	        call gotoxy
 0000075C  BA 00004203 R	        mov edx, offset strExitGame
 00000761  E8 00000000 E	        call writeString

 00000766  E8 00000000 E	       call readKey
 0000076B  74 B6		       jz takeMainMenuInput
 0000076D  66| 83 FA 31		       cmp dx, 31h
 00000771  74 0E		       je startGame
 00000773  66| 83 FA 32		       cmp dx, 32h
 00000777  74 0A		       je instructionScreen
 00000779  66| 83 FA 33		       cmp dx, 33h
 0000077D  74 0E		       je exitGame
 0000077F  EB A2		       jmp takeMainMenuInput
 00000781			       startGame:
 00000781  EB 13		       jmp exitMenuFunc

 00000783			       instructionScreen:
 00000783  E8 0000000F		       call drawInstructionScreen
 00000788  E9 FFFFFF48		       jmp drawMain

 0000078D			       exitGame:
 0000078D  C6 05 0000425B R	       mov endGame, 1
	   01
 00000794  EB 00		       jmp exitMenuFunc
				    

 00000796			exitMenuFunc:
 00000796  C3			ret
 00000797			drawMainScreen endp

				;draw instructions screen
 00000797			drawInstructionScreen proc
 00000797  E8 00000000 E	    call clrscr
 0000079C  0F B6 0D		    movzx ecx, main_title_rows
	   000041CB R
 000007A3  BE 00003B26 R	    mov esi, offset main_title
 000007A8  B2 08		    mov dl, 8
 000007AA  B6 01		    mov dh, 1
 000007AC			    mainScreen:
 000007AC  E8 00000000 E	    call gotoxy
 000007B1  8B D9		    mov ebx, ecx
 000007B3  B9 00000067		    mov ecx, lengthof main_title
 000007B8			        innerMainScreen:
 000007B8  B8 0000000F		            mov eax, white
 000007BD  E8 00000000 E	            call setTextColor
 000007C2  8A 06		            mov al, byte ptr [esi]
 000007C4  3C 2D		            cmp al, '-'
 000007C6  75 14		            jne writeMainScreen
 000007C8  A2 000041D4 R	            mov temp, al
 000007CD  B8 00000044		            mov eax, red+(red*16)
 000007D2  E8 00000000 E	            call setTextColor
 000007D7  A0 000041D4 R	            mov al, temp
 000007DC			            writeMainScreen:
 000007DC  E8 00000000 E	            call writeChar
 000007E1  46			            inc esi
 000007E2  E2 D4		        loop innerMainScreen
 000007E4  FE C6		    inc dh
 000007E6  8B CB		    mov ecx, ebx
 000007E8  E2 C2		    loop mainScreen
 000007EA			           instructionsScreen:
 000007EA  E8 00000000 E	            call readKey
 000007EF  66| 83 FA 1B		            cmp dx, VK_ESCAPE
 000007F3  74 38		            je exitInstructions
 000007F5  B8 0000000A		            mov eax, lightGreen
 000007FA  E8 00000000 E	            call setTextColor
 000007FF  B6 0F		            mov dh, 15
 00000801  B2 2F		            mov dl, 47
 00000803  E8 00000000 E	            call gotoxy
 00000808  0F B6 0D		            movzx ecx, instructions_rows
	   000041CA R
 0000080F  BE 00004014 R	            mov esi, offset instructions
 00000814			            printInstructions:
 00000814  8B DA		            mov ebx, edx
 00000816  8B D6		            mov edx, esi
 00000818  E8 00000000 E	            call writeString
 0000081D  8B D3		            mov edx, ebx
 0000081F  FE C6		            inc dh
 00000821  E8 00000000 E	            call gotoxy
 00000826  83 C6 1F		            add esi, 31
 00000829  E2 E9		            loop printInstructions
 0000082B  EB BD		        jmp instructionsScreen
 0000082D			        exitInstructions:
 0000082D  0F B6 0D		        movzx ecx, instructions_rows
	   000041CA R
 00000834  B6 0F		        mov dh, 15
 00000836  B2 2F		        mov dl, 47
 00000838			        clearInstructions:
 00000838  E8 00000000 E	            call gotoxy
 0000083D  8B DA		            mov ebx, edx
 0000083F  BA 000041A1 R	            mov edx, offset spaces
 00000844  E8 00000000 E	            call writeString
 00000849  8B D3		            mov edx, ebx
 0000084B  FE C6		            inc dh
 0000084D  E2 E9		        loop clearInstructions 
 0000084F  C3			ret
 00000850			drawInstructionScreen endp

				;draw pause menu screen 
 00000850			pauseMenuScreen proc
 00000850  E8 00000000 E	    call clrscr
 00000855  E8 FFFFFDEC		    call drawGameName
 0000085A  B8 0000000F		    mov eax, white
 0000085F  E8 00000000 E	    call SetTextColor
 00000864			    menuPaused:
 00000864  B8 0000000C		    mov eax, lightRed
 00000869  E8 00000000 E	    call setTextColor
 0000086E  B2 28		    mov dl, 40
 00000870  B6 14		    mov dh, 20
 00000872  E8 00000000 E	    call gotoxy
 00000877  BA 00004220 R	    mov edx, offset strUserName
 0000087C  E8 00000000 E	    call writeString
 00000881  80 C2 04		    add dl, 4
 00000884  BA 00004241 R	    mov edx, offset userName
 00000889  E8 00000000 E	    call writeString
 0000088E  B2 46		    mov dl, 70
 00000890  B6 14		    mov dh, 20
 00000892  E8 00000000 E	    call gotoxy
 00000897  BA 000041D9 R	    mov edx, offset strScore
 0000089C  E8 00000000 E	    call writeString
 000008A1  80 C2 04		    add dl, 4
 000008A4  A1 00004257 R	    mov eax, score
 000008A9  E8 00000000 E	    call writeInt
 000008AE  B2 30		    mov dl, 48
 000008B0  B6 16		    mov dh, 22
 000008B2  0F B6 0D		    movzx ecx, pause_rows
	   000041CC R
 000008B9  BE 00004144 R	    mov esi, offset pauseString
 000008BE  B8 0000000A		    mov eax, lightGreen
 000008C3  E8 00000000 E	    call setTextColor
 000008C8			    drawPause:
 000008C8  E8 00000000 E	        call gotoxy
 000008CD  8B DA		        mov ebx, edx
 000008CF  8B D6		        mov edx, esi
 000008D1  E8 00000000 E	        call writeString
 000008D6  8B D3		        mov edx, ebx
 000008D8  FE C6		        inc dh
 000008DA  83 C6 1F		        add esi, 31
 000008DD  E2 E9		    loop drawPause
 000008DF  E8 00000000 E	    call readKey
 000008E4  0F 84 FFFFFF7A	    jz menuPaused
 000008EA  66| 83 FA 31		    cmp dx, 31h 
 000008EE  74 0B		    je instructionScreenPause
 000008F0  66| 83 FA 1B		    cmp dx, VK_ESCAPE
 000008F4  74 14		    JE exitPause
 000008F6  E9 FFFFFF69		    jmp menuPaused
 000008FB			    instructionScreenPause:
 000008FB  E8 FFFFFE97		    call drawInstructionScreen
 00000900  E8 FFFFFD41		    call drawGameName
 00000905  E9 FFFFFF5A		    jmp menuPaused
				    
 0000090A			exitPause:
 0000090A  C3			ret
 0000090B			pauseMenuScreen endp

				;draw end screen
 0000090B			endScreen proc
 0000090B  E8 FFFFFD36		    call drawGameName
 00000910  B2 32		    mov dl, 50
 00000912  B6 14		    mov dh, 20
 00000914  E8 00000000 E	    call gotoxy
 00000919  B8 00000002		    mov eax, green
 0000091E  E8 00000000 E	    call settextcolor
 00000923  8B DA		    mov ebx, edx
 00000925  BA 00004220 R	    mov edx, offset strUserName
 0000092A  E8 00000000 E	    call writeString
 0000092F  8B D3		    mov edx, ebx 
 00000931  80 C2 0F		    add dl, 15
 00000934  E8 00000000 E	    call gotoxy
 00000939  B8 0000000C		    mov eax, lightred
 0000093E  E8 00000000 E	    call settextcolor
 00000943  BA 00004241 R	    mov edx, offset userName
 00000948  E8 00000000 E	    call writeString
 0000094D  B8 00000002		    mov eax, green 
 00000952  E8 00000000 E	    call settextcolor
 00000957  B2 32		    mov dl, 50
 00000959  B6 16		    mov dh, 22
 0000095B  E8 00000000 E	    call gotoxy
 00000960  8B DA		    mov ebx, edx
 00000962  BA 000041D9 R	    mov edx, offset strScore
 00000967  E8 00000000 E	    call writeString
 0000096C  8B D3		    mov edx, ebx
 0000096E  80 C2 0F		    add dl, 15
 00000971  E8 00000000 E	    call gotoxy
 00000976  B8 0000000C		    mov eax, lightred 
 0000097B  E8 00000000 E	    call settextcolor
 00000980  A1 00004257 R	    mov eax, score
 00000985  E8 00000000 E	    call writeInt
 0000098A  B6 18		    mov dh, 24
 0000098C  B2 2F		    mov dl, 47
 0000098E  E8 00000000 E	    call gotoxy
 00000993  B8 0000000F		    mov eax, white
 00000998  E8 00000000 E	    call settextcolor
 0000099D  BA 00003FFA R	    mov edx, offset endStr
 000009A2  E8 00000000 E	    call writeString

 000009A7			    takeEndInput:
 000009A7  E8 00000000 E	    call readKey
 000009AC  74 F9		    jz takeEndInput
 000009AE  66| 83 FA 1B		    cmp dx, VK_ESCAPE
 000009B2  74 02		    je exitEndScreen
 000009B4  EB F1		    jmp takeEndInput

 000009B6			exitEndScreen:
 000009B6  C6 05 0000425B R	mov endGame, 1
	   01
 000009BD  C3			ret
 000009BE			endScreen endp 
				;------------------------------------------------------------------------------
				;draw the board you see on screen
 000009BE			drawBoard proc
 000009BE  E8 00000000 E	    call clrscr
 000009C3  0F B6 0D		    movzx ecx, rows_map
	   00003B25 R
 000009CA  B2 00		    mov dl, 0
 000009CC  B6 00		    mov dh, 0
 000009CE  E8 00000000 E	    call gotoxy
 000009D3  8B 35 00000008 R	    mov esi, map
 000009D9			    printMap:
 000009D9  83 F9 00		        cmp ecx, 0
 000009DC  0F 84 00000097	        je endBoardPrint
 000009E2  8B D9		        mov ebx, ecx
 000009E4  8B 0D 0000000C R	        mov ecx, mapLength
 000009EA			            innerMap:            
 000009EA  8A 06		            mov al, byte ptr [esi]
 000009EC  A2 000041D4 R	            mov temp, al
 000009F1  3C 2A		            cmp al, '*'
 000009F3  74 3A		            je writeWall
 000009F5  3C 7C		            cmp al, '|'
 000009F7  74 36		            je writeWall
 000009F9  3C 2D		            cmp al, '-'
 000009FB  74 32		            je writeWall
 000009FD  3C 4F		            cmp al, 'O'
 000009FF  74 3A		            je writeTeleportPath
 00000A01  3C 26		            cmp al, '&'
 00000A03  74 23		            je writeFruit
 00000A05  3C 2B		            cmp al, '+'
 00000A07  74 3E		            je writeHiddenPath
 00000A09			            checkCoin:
 00000A09  3C 2E		            cmp al, '.'
 00000A0B  75 46		            jne writeSpace
 00000A0D  A2 000041D4 R	            mov temp, al
 00000A12  B8 0000000E		            mov eax, yellow
 00000A17  80 3D 000041D3 R	            cmp mapStarted, 1
	   01
 00000A1E  74 38		            je writeMap
 00000A20  FF 05 0000424B R	            inc totalCoins
				          
 00000A26  EB 30		            jmp writeMap

 00000A28			            writeFruit:
 00000A28  B8 00000040		            mov eax, (black+ red*16)
 00000A2D  EB 29		            jmp writeMap
 00000A2F			            writeWall:
 00000A2F  A2 000041D4 R	            mov temp, al
 00000A34  B8 00000001		            mov eax, blue
				            ;call setTextColor
				            ;mov al, temp
 00000A39  EB 1D		            jmp writeMap

 00000A3B			            writeTeleportPath:
 00000A3B  A2 000041D4 R	            mov temp, al
 00000A40  B8 0000000B		            mov eax, lightCyan
				            ;call setTextColor
				            ;mov al, temp
 00000A45  EB 11		            jmp writeMap

 00000A47			            writeHiddenPath:
 00000A47  A2 000041D4 R	            mov temp, al
 00000A4C  B8 0000000B		            mov eax, lightCyan
 00000A51  EB 05		            jmp writeMap
 00000A53			            writeSpace:
 00000A53  B8 0000000F		            mov eax, white
 00000A58			        writeMap:
 00000A58  E8 00000000 E	            call setTextColor
 00000A5D  A0 000041D4 R	            mov al, temp
 00000A62  E8 00000000 E	            call writeChar
 00000A67  46			            inc esi
 00000A68  E2 80		            loop innerMap
 00000A6A  8B CB		        mov ecx, ebx
 00000A6C  49			        dec ecx
 00000A6D  FE C6		        inc dh
 00000A6F  E8 00000000 E	        call gotoxy
 00000A74  E9 FFFFFF60		    jmp printMap
 00000A79			endBoardPrint:
 00000A79  C3			ret
 00000A7A			drawBoard endp

				;draw the player on screen
 00000A7A			DrawPlayer PROC
				    ; draw player at (xPos,yPos):
 00000A7A  B8 00000006		    mov eax,brown 
 00000A7F  E8 00000000 E	    call SetTextColor
 00000A84  8A 15 0000425C R	    mov dl,xPos
 00000A8A  8A 35 0000425D R	    mov dh,yPos
 00000A90  E8 00000000 E	    call Gotoxy
 00000A95  A0 0000425E R	    mov al,playerCh
 00000A9A  E8 00000000 E	    call WriteChar
 00000A9F  C3			    ret
 00000AA0			DrawPlayer ENDP

				;update player positions
 00000AA0			UpdatePlayer PROC
 00000AA0  8A 15 0000425C R	    mov dl,xPos
 00000AA6  8A 35 0000425D R	    mov dh,yPos
 00000AAC  B0 20		    mov al," "
 00000AAE			    playerUpdate:
 00000AAE  E8 00000000 E	    call Gotoxy
 00000AB3  E8 00000000 E	    call WriteChar
				    
 00000AB8  C3			    ret
 00000AB9			UpdatePlayer ENDP

				;update ghost positions
 00000AB9			updateGhost proc
				;update ghost is responsible for updating the positions of the ghosts and their movement on the screen
				;this function will only change the ghost positions if the ghost is colliding with an obstacle, i.e. a wall, a fruit, or a portal
				;if the position needs updating, it will generate a new random direction for the ghost, otherwise move ghost in the direction it was originally moving
 00000AB9  0F B6 0D		movzx ecx, numGhostsinlevel
	   00004266 R
 00000AC0  BF 00000000		mov edi, 0
 00000AC5  C6 05 000041D4 R	mov temp, 0
	   00
 00000ACC			ghostMov:
 00000ACC  83 F9 00		cmp ecx, 0
 00000ACF  0F 84 00000720	je endGhostUpdate
 00000AD5  89 0D 000041D5 R	mov tempDouble, ecx
				    ; Pinky (ghost index 1) chases the player only in level 2+
 00000ADB  83 FF 01		    cmp edi, 1
 00000ADE  0F 85 000002A7	    jne decideMovement
 00000AE4  A0 00004265 R	    mov al, level
 00000AE9  3C 02		    cmp al, 2
 00000AEB  0F 8C 0000029A	    jl decideMovement
				    ; Restore Pinky's previous position (coin or space)
 00000AF1  0F B6 9F		    movzx ebx, ghostYPos[edi]
	   0000427B R
 00000AF8  A1 0000000C R	    mov eax, mapLength
 00000AFD  0F B6 8F		    movzx ecx, ghostXPos[edi]
	   00004271 R
 00000B04  8B 35 00000008 R	    mov esi, map
 00000B0A  56			    push esi
 00000B0B  51			    push ecx
 00000B0C  53			    push ebx
 00000B0D  50			    push eax
 00000B0E  E8 00000880		    call checkCollision
 00000B13  58			    pop eax
 00000B14  5B			    pop ebx
 00000B15  59			    pop ecx
 00000B16  5E			    pop esi
				    ; Only redraw coin if map still has a coin at this position
 00000B17  0F B6 9F		    movzx ebx, ghostYPos[edi]
	   0000427B R
 00000B1E  A1 0000000C R	    mov eax, mapLength
 00000B23  0F B6 8F		    movzx ecx, ghostXPos[edi]
	   00004271 R
 00000B2A  8B 35 00000008 R	    mov esi, map
 00000B30  8B D0		    mov edx, eax
 00000B32  66| F7 E3		    mul bx
 00000B35  03 C1		    add eax, ecx
 00000B37  03 F0		    add esi, eax
 00000B39  8A 06		    mov al, byte ptr [esi]
 00000B3B  3C 2E		    cmp al, '.'
 00000B3D  75 19		    jne pinkyRedrawSpace
 00000B3F  53			    push ebx
 00000B40  8A 9F 00004271 R	    mov bl, ghostXPos[edi]
 00000B46  8A BF 0000427B R	    mov bh, ghostYPos[edi]
 00000B4C  53			    push ebx
 00000B4D  E8 00000793		    call reDrawCoin
 00000B52  83 C4 04		    add esp, 4
 00000B55  5B			    pop ebx
 00000B56  EB 17		    jmp skipPinkyRedraw
 00000B58			    pinkyRedrawSpace:
 00000B58  53			    push ebx
 00000B59  8A 9F 00004271 R	    mov bl, ghostXPos[edi]
 00000B5F  8A BF 0000427B R	    mov bh, ghostYPos[edi]
 00000B65  53			    push ebx
 00000B66  E8 00000799		    call redrawSpace
 00000B6B  83 C4 04		    add esp, 4
 00000B6E  5B			    pop ebx
 00000B6F			    skipPinkyRedraw:
				    ; Pinky AI with collision checks
 00000B6F  8A 87 00004271 R	    mov al, ghostXPos[edi]
 00000B75  8A A7 0000427B R	    mov ah, ghostYPos[edi]
 00000B7B  8A 1D 0000425C R	    mov bl, xPos
 00000B81  8A 3D 0000425D R	    mov bh, yPos
				    ; Try horizontal movement first
 00000B87  3A C3		    cmp al, bl
 00000B89  74 5B		    je pinkyTryVertical
				    ; Simulate horizontal move
 00000B8B  8A D0		    mov dl, al
 00000B8D  3A C3		    cmp al, bl
 00000B8F  7C 04		    jl pinkySimRight
 00000B91  FE CA		    dec dl
 00000B93  EB 02		    jmp pinkyCheckHorz
 00000B95			    pinkySimRight:
 00000B95  FE C2		    inc dl
 00000B97			    pinkyCheckHorz:
 00000B97  0F B6 DC		    movzx ebx, ah
 00000B9A  A1 0000000C R	    mov eax, mapLength
 00000B9F  0F B6 CA		    movzx ecx, dl
 00000BA2  8B 35 00000008 R	    mov esi, map
 00000BA8  56			    push esi
 00000BA9  51			    push ecx
 00000BAA  53			    push ebx
 00000BAB  50			    push eax
 00000BAC  E8 000007E2		    call checkCollision
 00000BB1  58			    pop eax
 00000BB2  5B			    pop ebx
 00000BB3  59			    pop ecx
 00000BB4  5E			    pop esi
 00000BB5  80 3D 000041CD R	    cmp boolCollision, 1
	   01
 00000BBC  74 28		    je pinkyTryVertical
				    ; Move horizontally
 00000BBE  3A C3		    cmp al, bl
 00000BC0  7C 12		    jl pinkyMoveRightFinal
 00000BC2  FE 8F 00004271 R	    dec ghostXPos[edi]
 00000BC8  C6 87 0000426C R	    mov ghostMovement[edi], 0
	   00
 00000BCF  E9 00000614		    jmp ghostUpdation
 00000BD4			    pinkyMoveRightFinal:
 00000BD4  FE 87 00004271 R	    inc ghostXPos[edi]
 00000BDA  C6 87 0000426C R	    mov ghostMovement[edi], 2
	   02
 00000BE1  E9 00000602		    jmp ghostUpdation
 00000BE6			    pinkyTryVertical:
				    ; Try vertical movement
 00000BE6  8A D4		    mov dl, ah
 00000BE8  3A E7		    cmp ah, bh
 00000BEA  7C 04		    jl pinkySimDown
 00000BEC  FE CA		    dec dl
 00000BEE  EB 02		    jmp pinkyCheckVert
 00000BF0			    pinkySimDown:
 00000BF0  FE C2		    inc dl
 00000BF2			    pinkyCheckVert:
 00000BF2  0F B6 DA		    movzx ebx, dl
 00000BF5  A1 0000000C R	    mov eax, mapLength
 00000BFA  0F B6 C8		    movzx ecx, al
 00000BFD  8B 35 00000008 R	    mov esi, map
 00000C03  56			    push esi
 00000C04  51			    push ecx
 00000C05  53			    push ebx
 00000C06  50			    push eax
 00000C07  E8 00000787		    call checkCollision
 00000C0C  58			    pop eax
 00000C0D  5B			    pop ebx
 00000C0E  59			    pop ecx
 00000C0F  5E			    pop esi
 00000C10  80 3D 000041CD R	    cmp boolCollision, 1
	   01
 00000C17  74 28		    je pinkyStay
				    ; Move vertically
 00000C19  3A E7		    cmp ah, bh
 00000C1B  7C 12		    jl pinkyMoveDownFinal
 00000C1D  FE 8F 0000427B R	    dec ghostYPos[edi]
 00000C23  C6 87 0000426C R	    mov ghostMovement[edi], 3
	   03
 00000C2A  E9 000005B9		    jmp ghostUpdation
 00000C2F			    pinkyMoveDownFinal:
 00000C2F  FE 87 0000427B R	    inc ghostYPos[edi]
 00000C35  C6 87 0000426C R	    mov ghostMovement[edi], 1
	   01
 00000C3C  E9 000005A7		    jmp ghostUpdation
 00000C41			    pinkyStay:
				    ; Blocked, fallback to random movement
 00000C41  E8 00000000 E	    call randomize
 00000C46  B8 00000004		    mov eax, 4        ; four directions
 00000C4B  E8 00000000 E	    call randomRange
 00000C50  83 F8 00		    cmp eax, 0
 00000C53  74 17		    je pinkyTryLeft
 00000C55  83 F8 01		    cmp eax, 1
 00000C58  74 59		    je pinkyTryRight
 00000C5A  83 F8 02		    cmp eax, 2
 00000C5D  0F 84 00000097	    je pinkyTryUp
 00000C63  83 F8 03		    cmp eax, 3
 00000C66  0F 84 000000D5	    je pinkyTryDown
 00000C6C			    pinkyTryLeft:
				    ; Try left
 00000C6C  8A 97 00004271 R	    mov dl, ghostXPos[edi]
 00000C72  FE CA		    dec dl
 00000C74  0F B6 9F		    movzx ebx, ghostYPos[edi]
	   0000427B R
 00000C7B  A1 0000000C R	    mov eax, mapLength
 00000C80  0F B6 CA		    movzx ecx, dl
 00000C83  8B 35 00000008 R	    mov esi, map
 00000C89  56			    push esi
 00000C8A  51			    push ecx
 00000C8B  53			    push ebx
 00000C8C  50			    push eax
 00000C8D  E8 00000701		    call checkCollision
 00000C92  58			    pop eax
 00000C93  5B			    pop ebx
 00000C94  59			    pop ecx
 00000C95  5E			    pop esi
 00000C96  80 3D 000041CD R	    cmp boolCollision, 1
	   01
 00000C9D  75 02		    jne pinkyMoveLeftFinal
 00000C9F  EB 12		    jmp pinkyTryRight
 00000CA1			    pinkyMoveLeftFinal:
 00000CA1  FE 8F 00004271 R	    dec ghostXPos[edi]
 00000CA7  C6 87 0000426C R	    mov ghostMovement[edi], 0
	   00
 00000CAE  E9 00000535		    jmp ghostUpdation
 00000CB3			    pinkyTryRight:
 00000CB3  8A 97 00004271 R	    mov dl, ghostXPos[edi]
 00000CB9  FE C2		    inc dl
 00000CBB  0F B6 9F		    movzx ebx, ghostYPos[edi]
	   0000427B R
 00000CC2  A1 0000000C R	    mov eax, mapLength
 00000CC7  0F B6 CA		    movzx ecx, dl
 00000CCA  8B 35 00000008 R	    mov esi, map
 00000CD0  56			    push esi
 00000CD1  51			    push ecx
 00000CD2  53			    push ebx
 00000CD3  50			    push eax
 00000CD4  E8 000006BA		    call checkCollision
 00000CD9  58			    pop eax
 00000CDA  5B			    pop ebx
 00000CDB  59			    pop ecx
 00000CDC  5E			    pop esi
 00000CDD  80 3D 000041CD R	    cmp boolCollision, 1
	   01
 00000CE4  75 02		    jne pinkyMoveRightFinal2
 00000CE6  EB 12		    jmp pinkyTryUp
 00000CE8			    pinkyMoveRightFinal2:
 00000CE8  FE 87 00004271 R	    inc ghostXPos[edi]
 00000CEE  C6 87 0000426C R	    mov ghostMovement[edi], 2
	   02
 00000CF5  E9 000004EE		    jmp ghostUpdation
 00000CFA			    pinkyTryUp:
 00000CFA  8A 97 0000427B R	    mov dl, ghostYPos[edi]
 00000D00  FE CA		    dec dl
 00000D02  0F B6 DA		    movzx ebx, dl
 00000D05  A1 0000000C R	    mov eax, mapLength
 00000D0A  0F B6 8F		    movzx ecx, ghostXPos[edi]
	   00004271 R
 00000D11  8B 35 00000008 R	    mov esi, map
 00000D17  56			    push esi
 00000D18  51			    push ecx
 00000D19  53			    push ebx
 00000D1A  50			    push eax
 00000D1B  E8 00000673		    call checkCollision
 00000D20  58			    pop eax
 00000D21  5B			    pop ebx
 00000D22  59			    pop ecx
 00000D23  5E			    pop esi
 00000D24  80 3D 000041CD R	    cmp boolCollision, 1
	   01
 00000D2B  75 02		    jne pinkyMoveUpFinal
 00000D2D  EB 12		    jmp pinkyTryDown
 00000D2F			    pinkyMoveUpFinal:
 00000D2F  FE 8F 0000427B R	    dec ghostYPos[edi]
 00000D35  C6 87 0000426C R	    mov ghostMovement[edi], 3
	   03
 00000D3C  E9 000004A7		    jmp ghostUpdation
 00000D41			    pinkyTryDown:
 00000D41  8A 97 0000427B R	    mov dl, ghostYPos[edi]
 00000D47  FE C2		    inc dl
 00000D49  0F B6 DA		    movzx ebx, dl
 00000D4C  A1 0000000C R	    mov eax, mapLength
 00000D51  0F B6 8F		    movzx ecx, ghostXPos[edi]
	   00004271 R
 00000D58  8B 35 00000008 R	    mov esi, map
 00000D5E  56			    push esi
 00000D5F  51			    push ecx
 00000D60  53			    push ebx
 00000D61  50			    push eax
 00000D62  E8 0000062C		    call checkCollision
 00000D67  58			    pop eax
 00000D68  5B			    pop ebx
 00000D69  59			    pop ecx
 00000D6A  5E			    pop esi
 00000D6B  80 3D 000041CD R	    cmp boolCollision, 1
	   01
 00000D72  75 05		    jne pinkyMoveDownFinal2
				    ; All directions blocked, stay
 00000D74  E9 0000046F		    jmp ghostUpdation
 00000D79			    pinkyMoveDownFinal2:
 00000D79  FE 87 0000427B R	    inc ghostYPos[edi]
 00000D7F  C6 87 0000426C R	    mov ghostMovement[edi], 1
	   01
 00000D86  E9 0000045D		    jmp ghostUpdation

 00000D8B			    decideMovement:
 00000D8B  80 3D 000041D4 R	    cmp temp, 30
	   1E
 00000D92  0F 8D 0000045D	    jge endGhostUpdate
 00000D98  FE 05 000041D4 R	    inc temp
 00000D9E  8A 87 00004271 R	    mov al, ghostXPos[edi]
 00000DA4  8A A7 0000427B R	    mov ah, ghostYPos[edi]
 00000DAA  8A 9F 0000426C R	    mov bl, ghostMovement[edi]
 00000DB0  80 FB 03		    cmp bl, 3                   ;their are 4 four possibilities 
 00000DB3  74 1B		    je ghostUp
 00000DB5  80 FB 01		    cmp bl, 1
 00000DB8  0F 84 00000105	    je ghostDown
 00000DBE  80 FB 00		    cmp bl, 0
 00000DC1  0F 84 000001EF	    je ghostLeft
 00000DC7  80 FB 02		    cmp bl, 2
 00000DCA  0F 84 000002D9	    je ghostRight

 00000DD0			    ghostUp:
 00000DD0  E8 0000063F		    call resetCollisionVars
 00000DD5  FE 8F 0000427B R	    dec ghostYPos[edi]
 00000DDB  0F B6 9F		    movzx ebx, ghostYpos[edi]
	   0000427B R
 00000DE2  A1 0000000C R	    mov eax, mapLength
 00000DE7  0F B6 8F		    movzx ecx, ghostXPos[edi]
	   00004271 R
 00000DEE  8B 35 00000008 R	    mov esi, map
 00000DF4  56			    push esi
 00000DF5  51			    push ecx
 00000DF6  53			    push ebx
 00000DF7  50			    push eax
 00000DF8  E8 00000596		    call checkCollision                     ;checking different collision scenarios 
 00000DFD  58			    pop eax
 00000DFE  5B			    pop ebx 
 00000DFF  59			    pop ecx
 00000E00  5E			    pop esi
 00000E01  FE 87 0000427B R	    inc ghostYPos[edi]
 00000E07  80 3D 000041D0 R	    cmp teleportCollision, 1
	   01
 00000E0E  0F 84 00000381	    je generateRandomMove
 00000E14  80 3D 000041D2 R	    cmp fruitCollision, 1
	   01
 00000E1B  0F 84 00000374	    je generateRandomMove                   ;if any of these checks are true, the ghost needs a new updated direction
 00000E21  80 3D 000041CD R	    cmp boolCollision, 1
	   01
 00000E28  0F 84 00000367	    je generateRandomMove
 00000E2E  80 3D 000041D1 R	    cmp hiddenPathCollision, 1
	   01
 00000E35  0F 84 0000035A	    je generateRandomMove
 00000E3B  8A 87 0000427B R	    mov al, ghostYPos[edi]
 00000E41  3C 01		    cmp al, 1
 00000E43  0F 8E 0000034C	    jle generateRandomMove
 00000E49			    coinCollisionUp:                
 00000E49  E8 000005C6		    call resetCollisionVars
 00000E4E  0F B6 9F		    movzx ebx, ghostYpos[edi]
	   0000427B R
 00000E55  A1 0000000C R	    mov eax, mapLength
 00000E5A  0F B6 8F		    movzx ecx, ghostXPos[edi]
	   00004271 R
 00000E61  8B 35 00000008 R	    mov esi, map
 00000E67  56			    push esi
 00000E68  51			    push ecx
 00000E69  53			    push ebx
 00000E6A  50			    push eax
 00000E6B  E8 00000523		    call checkCollision
 00000E70  58			    pop eax
 00000E71  5B			    pop ebx 
 00000E72  59			    pop ecx
 00000E73  5E			    pop esi
 00000E74  80 3D 000041CE R	    cmp coinCollision, 1
	   01
 00000E7B  75 1D		    jne updateSpaceUp                       ;rewriting coin in the map in case of collision 
 00000E7D  B0 2E		    mov al, '.'
 00000E7F  88 06		    mov byte ptr [esi], al
 00000E81  53			    push ebx
 00000E82  8A 9F 00004271 R	    mov bl, ghostXPos[edi]
 00000E88  8A BF 0000427B R	    mov bh, ghostYPos[edi]
 00000E8E  53			    push ebx
 00000E8F  E8 00000451		    call reDrawCoin
 00000E94  83 C4 04		    add esp, 4
 00000E97  5B			    pop ebx
 00000E98  EB 17		    jmp moveUp
 00000E9A			    updateSpaceUp:
 00000E9A  53			    push ebx                                ;rewriting space in the previous ghost position 
 00000E9B  8A 9F 00004271 R	    mov bl, ghostXPos[edi]
 00000EA1  8A BF 0000427B R	    mov bh, ghostYPos[edi]
 00000EA7  53			    push ebx
 00000EA8  E8 00000457		    call redrawSpace
 00000EAD  83 C4 04		    add esp, 4
 00000EB0  5B			    pop ebx
 00000EB1			    moveUp:
 00000EB1  FE 8F 0000427B R	    dec ghostYPos[edi]                      ;if no updation required, move ghost normally in the direction it was moving 
 00000EB7  C6 87 0000426C R	    mov ghostMovement[edi], 3
	   03
 00000EBE  E9 00000325		    jmp ghostUpdation
				    
				    ;-------------------------------------------------------------------------
				    ;----------------------------same game logic as above---------------------
 00000EC3			    ghostDown:
 00000EC3  E8 0000054C		    call resetCollisionVars
 00000EC8  FE 87 0000427B R	    inc ghostYPos[edi]
 00000ECE  0F B6 9F		    movzx ebx, ghostYPos[edi]
	   0000427B R
 00000ED5  A1 0000000C R	    mov eax, mapLength
 00000EDA  0F B6 8F		    movzx ecx, ghostXPos[edi]
	   00004271 R
 00000EE1  8B 35 00000008 R	    mov esi, map
 00000EE7  56			    push esi
 00000EE8  51			    push ecx
 00000EE9  53			    push ebx
 00000EEA  50			    push eax
 00000EEB  E8 000004A3		    call checkCollision
 00000EF0  58			    pop eax
 00000EF1  5B			    pop ebx 
 00000EF2  59			    pop ecx
 00000EF3  5E			    pop esi
 00000EF4  FE 8F 0000427B R	    dec ghostYPos[edi]
 00000EFA  80 3D 000041D0 R	    cmp teleportCollision, 1
	   01
 00000F01  0F 84 0000028E	    je generateRandomMove
 00000F07  80 3D 000041D2 R	    cmp fruitCollision, 1
	   01
 00000F0E  0F 84 00000281	    je generateRandomMove
 00000F14  80 3D 000041CD R	    cmp boolCollision, 1
	   01
 00000F1B  0F 84 00000274	    je generateRandomMove
 00000F21  80 3D 000041D1 R	    cmp hiddenPathCollision, 1
	   01
 00000F28  0F 84 00000267	    je generateRandomMove
 00000F2E  8A 87 0000427B R	    mov al, ghostYPos[edi]
 00000F34  3C 17		    cmp al, 23
 00000F36  0F 8D 00000259	    jge generateRandomMove
 00000F3C			    coinCollisionDown:
 00000F3C  E8 000004D3		    call resetCollisionVars
 00000F41  0F B6 9F		    movzx ebx, ghostYPos[edi]
	   0000427B R
 00000F48  A1 0000000C R	    mov eax, mapLength
 00000F4D  0F B6 8F		    movzx ecx, ghostXPos[edi]
	   00004271 R
 00000F54  8B 35 00000008 R	    mov esi, map
 00000F5A  56			    push esi
 00000F5B  51			    push ecx
 00000F5C  53			    push ebx
 00000F5D  50			    push eax
 00000F5E  E8 00000430		    call checkCollision
 00000F63  58			    pop eax
 00000F64  5B			    pop ebx 
 00000F65  59			    pop ecx
 00000F66  5E			    pop esi
 00000F67  80 3D 000041CE R	    cmp coinCollision, 1
	   01
 00000F6E  75 1D		    jne updateSpaceDown
 00000F70  B0 2E		    mov al, '.'
 00000F72  88 06		    mov byte ptr [esi], al
 00000F74  53			    push ebx
 00000F75  8A 9F 00004271 R	    mov bl, ghostXPos[edi]
 00000F7B  8A BF 0000427B R	    mov bh, ghostYPos[edi]
 00000F81  53			    push ebx
 00000F82  E8 0000035E		    call reDrawCoin
 00000F87  83 C4 04		    add esp, 4
 00000F8A  5B			    pop ebx
 00000F8B  EB 17		    jmp moveDown
 00000F8D			    updateSpaceDown:
 00000F8D  53			        push ebx
 00000F8E  8A 9F 00004271 R	    mov bl, ghostXPos[edi]
 00000F94  8A BF 0000427B R	    mov bh, ghostYPos[edi]
 00000F9A  53			    push ebx
 00000F9B  E8 00000364		    call redrawSpace
 00000FA0  83 C4 04		    add esp, 4
 00000FA3  5B			    pop ebx        
 00000FA4			    moveDown:
 00000FA4  FE 87 0000427B R	    inc ghostYPos[edi]
 00000FAA  C6 87 0000426C R	    mov ghostMovement[edi], 1
	   01
 00000FB1  E9 00000232		    jmp ghostUpdation
				    
				    ;-------------------------------------------------------------------------
				    ;----------------------------same game logic as above---------------------
 00000FB6			    ghostLeft:
 00000FB6  E8 00000459		    call resetCollisionVars
 00000FBB  FE 8F 00004271 R	    dec ghostXPos[edi]
 00000FC1  0F B6 9F		    movzx ebx, ghostYPos[edi]
	   0000427B R
 00000FC8  A1 0000000C R	    mov eax, mapLength
 00000FCD  0F B6 8F		    movzx ecx, ghostXPos[edi]
	   00004271 R
 00000FD4  8B 35 00000008 R	    mov esi, map
 00000FDA  56			    push esi
 00000FDB  51			    push ecx
 00000FDC  53			    push ebx
 00000FDD  50			    push eax
 00000FDE  E8 000003B0		    call checkCollision
 00000FE3  58			    pop eax
 00000FE4  5B			    pop ebx 
 00000FE5  59			    pop ecx
 00000FE6  5E			    pop esi    
 00000FE7  FE 87 00004271 R	    inc ghostXPos[edi]
 00000FED  80 3D 000041D0 R	    cmp teleportCollision, 1
	   01
 00000FF4  0F 84 0000019B	    je generateRandomMove
 00000FFA  80 3D 000041D2 R	    cmp fruitCollision, 1
	   01
 00001001  0F 84 0000018E	    je generateRandomMove
 00001007  80 3D 000041CD R	    cmp boolCollision, 1
	   01
 0000100E  0F 84 00000181	    je generateRandomMove
 00001014  80 3D 000041D1 R	    cmp hiddenPathCollision, 1
	   01
 0000101B  0F 84 00000174	    je generateRandomMove
 00001021  8A 87 00004271 R	    mov al, ghostXPos[edi]
 00001027  3C 01		    cmp al, 1
 00001029  0F 8E 00000166	    jle generateRandomMove
 0000102F			    coinCollisionLeft:
 0000102F  E8 000003E0		    call resetCollisionVars
 00001034  0F B6 9F		    movzx ebx, ghostYpos[edi]
	   0000427B R
 0000103B  A1 0000000C R	    mov eax, mapLength
 00001040  0F B6 8F		    movzx ecx, ghostXPos[edi]
	   00004271 R
 00001047  8B 35 00000008 R	    mov esi, map
 0000104D  56			    push esi
 0000104E  51			    push ecx
 0000104F  53			    push ebx
 00001050  50			    push eax
 00001051  E8 0000033D		    call checkCollision
 00001056  58			    pop eax
 00001057  5B			    pop ebx 
 00001058  59			    pop ecx
 00001059  5E			    pop esi
 0000105A  80 3D 000041CE R	    cmp coinCollision, 1
	   01
 00001061  75 1D		    jne updateSpaceLeft
 00001063  B0 2E		    mov al, '.'
 00001065  88 06		    mov byte ptr [esi], al
 00001067  53			    push ebx
 00001068  8A 9F 00004271 R	    mov bl, ghostXPos[edi] 
 0000106E  8A BF 0000427B R	    mov bh, ghostYPos[edi]
 00001074  53			    push ebx
 00001075  E8 0000026B		    call reDrawCoin
 0000107A  83 C4 04		    add esp, 4
 0000107D  5B			    pop ebx
 0000107E  EB 17		    jmp moveLeft
 00001080			    updateSpaceLeft:
 00001080  53			    push ebx
 00001081  8A 9F 00004271 R	    mov bl, ghostXPos[edi]
 00001087  8A BF 0000427B R	    mov bh, ghostYPos[edi]
 0000108D  53			    push ebx
 0000108E  E8 00000271		    call redrawSpace
 00001093  83 C4 04		    add esp, 4
 00001096  5B			    pop ebx
 00001097			    moveLeft:
 00001097  FE 8F 00004271 R	    dec ghostXPos[edi]
 0000109D  C6 87 0000426C R	    mov ghostMovement[edi], 0
	   00
 000010A4  E9 0000013F		    jmp ghostUpdation
				    
				    ;-------------------------------------------------------------------------
				    ;----------------------------same game logic as above---------------------
 000010A9			    ghostRight:
 000010A9  E8 00000366		    call resetCollisionVars
 000010AE  FE 87 00004271 R	    inc ghostXPos[edi]
 000010B4  0F B6 9F		    movzx ebx, ghostYPos[edi]
	   0000427B R
 000010BB  A1 0000000C R	    mov eax, mapLength
 000010C0  0F B6 8F		    movzx ecx, ghostXPos[edi]
	   00004271 R
 000010C7  8B 35 00000008 R	    mov esi, map
 000010CD  56			    push esi
 000010CE  51			    push ecx
 000010CF  53			    push ebx
 000010D0  50			    push eax
 000010D1  E8 000002BD		    call checkCollision
 000010D6  58			    pop eax
 000010D7  5B			    pop ebx 
 000010D8  59			    pop ecx
 000010D9  5E			    pop esi    
 000010DA  FE 8F 00004271 R	    dec ghostXPos[edi]
 000010E0  80 3D 000041D0 R	    cmp teleportCollision, 1
	   01
 000010E7  0F 84 000000A8	    je generateRandomMove
 000010ED  80 3D 000041D2 R	    cmp fruitCollision, 1
	   01
 000010F4  0F 84 0000009B	    je generateRandomMove
 000010FA  80 3D 000041CD R	    cmp boolCollision, 1
	   01
 00001101  0F 84 0000008E	    je generateRandomMove
 00001107  80 3D 000041D1 R	    cmp hiddenPathCollision, 1
	   01
 0000110E  0F 84 00000081	    je generateRandomMove
 00001114  8A 87 00004271 R	    mov al, ghostXPos[edi]
 0000111A  3C 76		    cmp al, 118
 0000111C  7D 77		    jge generateRandomMove
 0000111E			    coinCollisionRight:
 0000111E  E8 000002F1		    call resetCollisionVars
 00001123  0F B6 9F		    movzx ebx, ghostYpos[edi]
	   0000427B R
 0000112A  A1 0000000C R	    mov eax, mapLength
 0000112F  0F B6 8F		    movzx ecx, ghostXPos[edi]
	   00004271 R
 00001136  8B 35 00000008 R	    mov esi, map
 0000113C  56			    push esi
 0000113D  51			    push ecx
 0000113E  53			    push ebx
 0000113F  50			    push eax
 00001140  E8 0000024E		    call checkCollision
 00001145  58			    pop eax
 00001146  5B			    pop ebx 
 00001147  59			    pop ecx
 00001148  5E			    pop esi
 00001149  80 3D 000041CE R	    cmp coinCollision, 1
	   01
 00001150  75 1D		    jne updateSpaceRight
 00001152  B0 2E		    mov al, '.'
 00001154  88 06		    mov byte ptr [esi], al
 00001156  53			    push ebx
 00001157  8A 9F 00004271 R	    mov bl, ghostXPos[edi]
 0000115D  8A BF 0000427B R	    mov bh, ghostYPos[edi]
 00001163  53			    push ebx
 00001164  E8 0000017C		    call reDrawCoin
 00001169  83 C4 04		    add esp, 4
 0000116C  5B			    pop ebx
 0000116D  EB 17		    jmp moveRight
 0000116F			    updateSpaceRight:
 0000116F  53			    push ebx
 00001170  8A 9F 00004271 R	    mov bl, ghostXPos[edi]
 00001176  8A BF 0000427B R	    mov bh, ghostYPos[edi]
 0000117C  53			    push ebx
 0000117D  E8 00000182		    call redrawSpace
 00001182  83 C4 04		    add esp, 4
 00001185  5B			    pop ebx
 00001186			    moveRight:
 00001186  FE 87 00004271 R	    inc ghostXPos[edi]
 0000118C  C6 87 0000426C R	    mov ghostMovement[edi], 2
	   02
 00001193  EB 53		    jmp ghostUpdation


 00001195			    generateRandomMove:
 00001195  E8 00000000 E	        call randomize
 0000119A  B8 00000004		        mov eax, 4        ;since there are 4 movements 
 0000119F  E8 00000000 E	        call randomRange
 000011A4  83 F8 03		        cmp eax, 3          ;0: move randomly up
 000011A7  74 0F		        je possibilityUp
 000011A9  83 F8 01		        cmp eax, 1          ;1: move down
 000011AC  74 16		        je possibilityDown
 000011AE  83 F8 00		        cmp eax, 0          ;move left
 000011B1  74 1D		        je possibilityLeft
 000011B3  83 F8 02		        cmp eax, 2          ;move right
 000011B6  74 24		        je possibilityRight 
 000011B8			        possibilityUp:
 000011B8  C6 87 0000426C R	        mov ghostMovement[edi], 3               ;these decide a possible move for the ghost and check if the decided move is possible
	   03
 000011BF  E9 FFFFFBC7		        jmp decideMovement
 000011C4			        possibilityDown:
 000011C4  C6 87 0000426C R	        mov ghostMovement[edi], 1
	   01
 000011CB  E9 FFFFFBBB		        jmp decideMovement
 000011D0			        possibilityLeft:
 000011D0  C6 87 0000426C R	        mov ghostMovement[edi], 0
	   00
 000011D7  E9 FFFFFBAF		        jmp decideMovement
 000011DC			        possibilityRight:
 000011DC  C6 87 0000426C R	        mov ghostMovement[edi], 2
	   02
 000011E3  E9 FFFFFBA3		        jmp decideMovement

 000011E8			    ghostUpdation:
 000011E8  47			        inc edi
 000011E9  8B 0D 000041D5 R	        mov ecx, tempDouble
 000011EF  49			        dec ecx

 000011F0  E9 FFFFF8D7		jmp ghostMov
 000011F5			endGhostUpdate:
 000011F5  C3			ret
 000011F6			updateGhost endp

				;drawing the ghosts
 000011F6			drawGhost Proc
 000011F6  0F B6 0D		   movzx ecx, numGhostsInLevel
	   00004266 R
				   
 000011FD  BE 00000000		   mov esi, 0
				   ;draw ghost logic:
				   ;decide the color of the ghost, update its position, draw on the screen 
 00001202			   ghostDraw:
 00001202  0F B6 86		   movzx eax, ghostColor[esi]
	   00004285 R
 00001209  83 F8 52		   cmp eax, 'R'
 0000120C  75 07		   jne checkGreen
 0000120E  B8 00000004		   mov eax, red
 00001213  EB 29		   jmp drawG
 00001215			   checkGreen:
 00001215  83 F8 47		   cmp eax, 'G'
 00001218  75 07		   jne checkCyan
 0000121A  B8 0000000A		   mov eax, lightGreen
 0000121F  EB 1D		   jmp drawG
 00001221			   checkCyan:
 00001221  83 F8 43		   cmp eax, 'C'
 00001224  75 07		   jne checkMagenta
 00001226  B8 00000003		   mov eax, cyan
 0000122B  EB 11		   jmp drawG
 0000122D			   checkMagenta:
 0000122D  83 F8 4D		   cmp eax, 'M'
 00001230  75 07		   jne checkWhite
 00001232  B8 00000005		   mov eax, magenta
 00001237  EB 05		   jmp drawG
 00001239			   checkWhite:
 00001239  B8 0000000F		   mov eax, white
 0000123E			   drawG:
 0000123E  E8 00000000 E	   call setTextColor

 00001243  8A 96 00004271 R	   mov dl, ghostXPos[esi]
 00001249  8A B6 0000427B R	   mov dh, ghostYPos[esi]
 0000124F  E8 00000000 E	   call gotoxy
 00001254  8A 86 00004267 R	   mov al, ghostChar[esi]
 0000125A  E8 00000000 E	   call writeChar
 0000125F  46			   inc esi
 00001260  E2 A0		   loop ghostDraw
 00001262  B8 0000000F		   mov eax, white
 00001267  E8 00000000 E	   call SetTextColor
 0000126C  C3			ret
 0000126D			drawGhost endp

				;checking collision with the enemy
 0000126D			checkPlayerEnemeyCollision proc
 0000126D  8B 54 24 04		    mov edx, [esp+4]
 00001271  BE 00000000		    mov esi, 0
 00001276  0F B6 0D		    movzx ecx, numGhostsInLevel
	   00004266 R
				    ;compares players collision with the enemy by comparing player coordinates with each enemy. If collided, sets the boolean to true
 0000127D			    checkCollisionEnemy:
 0000127D  3A 96 00004271 R	        cmp dl, ghostXPos[esi]
 00001283  75 5C		        jne checkRest
 00001285  3A B6 0000427B R	        cmp dh, ghostYPos[esi]
 0000128B  75 54		        jne checkRest
 0000128D  A0 0000433C R	        mov al, powerMode
 00001292  3C 01		        cmp al, 1
 00001294  75 2C		        jne normalGhostCollision
				        ; Power mode: eat ghost
 00001296  8A 86 00004276 R	        mov al, ghostXPosOriginal[esi]
 0000129C  88 86 00004271 R	        mov ghostXPos[esi], al
 000012A2  8A 86 00004280 R	        mov al, ghostYPosOriginal[esi]
 000012A8  88 86 0000427B R	        mov ghostYPos[esi], al
 000012AE  A1 0000433F R	        mov eax, powerPelletPoints
 000012B3  01 05 00004257 R	        add score, eax
 000012B9  C6 05 000041CF R	        mov enemyCollision, 0
	   00
 000012C0  EB 22		        jmp exitCollisionCheck
 000012C2			        normalGhostCollision:
 000012C2  FE 0D 00004260 R	        dec lives
 000012C8  80 3D 00004260 R	        cmp lives, 0
	   00
 000012CF  7D 07		        jge skipLivesFix
 000012D1  C6 05 00004260 R	        mov lives, 0
	   00
 000012D8			        skipLivesFix:
 000012D8  C6 05 000041CF R	        mov enemyCollision, 1
	   01
 000012DF  EB 03		        jmp exitCollisionCheck
 000012E1			        checkRest:
 000012E1  46			        inc esi
 000012E2  E2 99		    loop checkCollisionEnemy

 000012E4			    exitCollisionCheck:
 000012E4  C3			ret
 000012E5			checkPlayerEnemeyCollision endp

				;redrawing coin after ghost move
 000012E5			reDrawCoin proc uses edx
				;edx stores the previous ghost position and redraws a coin on that particular position on the screen
 000012E5  52		   *	    push   edx
 000012E6  8B 5C 24 08		    mov ebx, [esp+8]
 000012EA  8B D3		    mov edx, ebx
 000012EC  B8 0000000E		    mov eax, yellow
 000012F1  E8 00000000 E	    call setTextColor
 000012F6  E8 00000000 E	    call gotoXY
 000012FB  B0 2E		    mov al, '.'
 000012FD  E8 00000000 E	    call writeChar
				ret
 00001302  5A		   *	    pop    edx
 00001303  C3		   *	    ret    00000h
 00001304			reDrawCoin endp

				;redrawing space after ghost move
 00001304			reDrawSpace proc uses edx
				;edx stores the previous ghost position and redraws a space on that particular position on the screen
 00001304  52		   *	    push   edx
 00001305  8B 5C 24 08		    mov ebx, [esp+8]
 00001309  8B D3		    mov edx, ebx
 0000130B  E8 00000000 E	    call gotoXY
 00001310  B0 20		    mov al, ' '
 00001312  E8 00000000 E	    call writeChar
				ret
 00001317  5A		   *	    pop    edx
 00001318  C3		   *	    ret    00000h
 00001319			reDrawSpace endp

				;functions for the information you see on screen
 00001319			updateScore proc uses eax
 00001319  50		   *	    push   eax
 0000131A  B8 00000002		        mov eax, green
 0000131F  E8 00000000 E	        call setTextColor
 00001324  B2 1E		        mov dl,30
 00001326  B6 1A		        mov dh,26
 00001328  E8 00000000 E	        call Gotoxy
 0000132D  BA 000041D9 R	        mov edx,OFFSET strScore
 00001332  E8 00000000 E	        call WriteString
 00001337  A1 00004257 R	        mov eax, score
 0000133C  E8 00000000 E	        call WriteInt
				ret
 00001341  58		   *	    pop    eax
 00001342  C3		   *	    ret    00000h
 00001343			updateScore endp

 00001343			updateLives proc
 00001343  B8 0000000C		        mov eax, lightRed
 00001348  E8 00000000 E	        call setTextColor
 0000134D  B2 50		        mov dl,80
 0000134F  B6 1A		        mov dh,26
 00001351  E8 00000000 E	        call Gotoxy
 00001356  BA 00004210 R	        mov edx,OFFSET strLives
 0000135B  E8 00000000 E	        call WriteString
 00001360  A0 00004260 R	        mov al, lives
 00001365  E8 00000000 E	        call WriteInt
 0000136A  C3			ret
 0000136B			updateLives endp

 0000136B			updateLevel proc
 0000136B  B8 0000000B		        mov eax, lightCyan
 00001370  E8 00000000 E	        call setTextColor
 00001375  B2 38		        mov dl, 56
 00001377  B6 1C		        mov dh,28
 00001379  E8 00000000 E	        call Gotoxy
 0000137E  BA 00004218 R	        mov edx,OFFSET strLevel
 00001383  E8 00000000 E	        call WriteString
 00001388  A0 00004265 R	        mov al, level
 0000138D  E8 00000000 E	        call WriteInt
 00001392  C3			ret
 00001393			updateLevel endp
				;-----------------------------------------
				;main collision function
 00001393			checkCollision proc uses edx
				;this is the main collision function that checks each possibilty of collision
				;player coordinates are in ebx(yPos) and ecx(xPos), eax contains map length (no of columns of 1 row), esi contains offset of the map
				;the collision logic uses the formula: (map length * ebx + ecx) + esi
				;this gets us to the particular position in the map, this we can check what is at that position 
 00001393  52		   *	    push   edx
 00001394  8B EC		    mov ebp, esp
 00001396  55			    push ebp
 00001397  8B 45 08		    mov eax, [ebp+8]
 0000139A  8B 5D 0C		    mov ebx, [ebp+12]
 0000139D  8B 4D 10		    mov ecx, [ebp+16]
 000013A0  8B 75 14		    mov esi, [ebp+20]
 000013A3  BA 00000000		    mov edx, 0
 000013A8  66| F7 E3		    mul bx
 000013AB  03 C1		    add eax, ecx
 000013AD  03 F0		    add esi, eax
 000013AF  8A 0E		    mov cl, byte ptr [esi]              ;copying the position over
 000013B1  80 F9 2A		    cmp cl, '*'
 000013B4  75 07		    jne checkCoin
 000013B6  C6 05 000041CD R	    mov boolCollision, 1
	   01
 000013BD			    checkCoin:
 000013BD  80 F9 2E		    cmp cl, '.'
 000013C0  75 09		    jne checkTeleportCollision
 000013C2  C6 05 000041CE R	    mov coinCollision, 1
	   01
 000013C9  EB 43		    jmp endCheck
 000013CB			    checkTeleportCollision:
 000013CB  80 F9 4F		    cmp cl, 'O'
 000013CE  75 09		    jne checkFruitCollision
 000013D0  C6 05 000041D0 R	    mov teleportCollision, 1
	   01
 000013D7  EB 35		    jmp endCheck
 000013D9			    checkFruitCollision:
 000013D9  80 F9 26		    cmp cl, '&'
 000013DC  75 09		    jne checkPowerPelletCollision
 000013DE  C6 05 000041D2 R	    mov fruitCollision, 1
	   01
 000013E5  EB 27		    jmp endCheck
 000013E7			    checkPowerPelletCollision:
 000013E7  80 F9 50		    cmp cl, 'P'
 000013EA  75 16		    jne checkHiddenPathCollision
 000013EC  C6 05 0000433C R	    mov powerMode, 1
	   01
 000013F3  66| C7 05		    mov powerModeTimer, POWER_MODE_DURATION
	   0000433D R
	   00C8
 000013FC  B0 20		    mov al, ' '
 000013FE  88 06		    mov byte ptr [esi], al ; erase pellet from map
 00001400  EB 0C		    jmp endCheck
 00001402			    checkHiddenPathCollision:
 00001402  80 F9 2B		    cmp cl, '+'
 00001405  75 07		    jne endCheck
 00001407  C6 05 000041D1 R	    mov hiddenPathCollision, 1
	   01
 0000140E			    endCheck:           
 0000140E  89 75 14		    mov dword ptr [ebp+20], esi             ;moving the calculated position of esi onto the stack. after this function ends, 
 00001411  5D			    pop ebp                                 ;this position will be used to rewrite what was already there in the map
				ret
 00001412  5A		   *	    pop    edx
 00001413  C3		   *	    ret    00000h
 00001414			checkCollision endp

				;to reset collision variables for collision checks
 00001414			resetCollisionVars proc
 00001414  C6 05 000041CD R	    mov boolCollision, 0
	   00
 0000141B  C6 05 000041CE R	    mov coinCollision, 0
	   00
 00001422  C6 05 000041CF R	    mov enemyCollision, 0
	   00
 00001429  C6 05 000041D0 R	    mov teleportCollision, 0
	   00
 00001430  C6 05 000041D1 R	    mov hiddenPathCollision, 0
	   00
 00001437  C6 05 000041D2 R	    mov fruitCollision, 0
	   00
 0000143E  C3			ret
 0000143F			resetCollisionVars endp

				;check for player teleportation 
 0000143F			checkTeleport proc
				;checks different scenarios for the teleportation paths on the screen, particular (x,y) positions 
				;are compared and if both conditions satisfy, the player is moved to the new position 
 0000143F  80 3D 0000425C R	   cmp xPos, 3
	   03
 00001446  74 02		   je checkSecond
 00001448  EB 19		   jmp checkThird

 0000144A			   checkSecond:
 0000144A  80 3D 0000425D R	   cmp yPos, 20
	   14
 00001451  75 10		   jne checkThird
 00001453  C6 05 0000425C R	   mov xPos, 110
	   6E
 0000145A  C6 05 0000425D R	   mov yPos, 2
	   02
 00001461  EB 6A		    jmp exit_checkTeleport

 00001463			   checkThird:
 00001463  80 3D 0000425C R	   cmp xPos, 111
	   6F
 0000146A  74 02		   je checkFourth
 0000146C  EB 19		   jmp checkFifth

 0000146E			   checkFourth:
 0000146E  80 3D 0000425D R	   cmp yPos, 2
	   02
 00001475  75 10		   jne checkFifth
 00001477  C6 05 0000425C R	   mov xPos, 4
	   04
 0000147E  C6 05 0000425D R	   mov yPos, 20
	   14
 00001485  EB 46		   jmp exit_checkTeleport

 00001487			   checkFifth:
 00001487  80 3D 0000425C R	   cmp xPos, 3
	   03
 0000148E  74 02		   je checkSixth
 00001490  EB 19		   jmp checkSeventh

 00001492			   checkSixth:
 00001492  80 3D 0000425D R	   cmp yPos, 2
	   02
 00001499  75 10		   jne checkSeventh
 0000149B  C6 05 0000425C R	   mov xPos, 103
	   67
 000014A2  C6 05 0000425D R	   mov yPos, 22
	   16
 000014A9  EB 22		   jmp exit_checkTeleport

 000014AB			   checkSeventh:
 000014AB  80 3D 0000425C R	   cmp xPos, 104
	   68
 000014B2  74 02		   je checkEighth
 000014B4  EB 17		   jmp exit_checkTeleport

 000014B6			   checkEighth:
 000014B6  80 3D 0000425D R	   cmp yPos, 22         
	   16
 000014BD  75 0E		   jne exit_checkTeleport
 000014BF  C6 05 0000425C R	   mov xPos, 4
	   04
 000014C6  C6 05 0000425D R	   mov yPos, 2
	   02

 000014CD			exit_checkTeleport:
 000014CD  C3			ret
 000014CE			checkTeleport endp

				;file handling function 
 000014CE			writeScores proc
 000014CE  BA 00004302 R	    mov edx, offset fileName
 000014D3  E8 00000000 E	    call OpenInputFile
 000014D8  A3 00004317 R	    mov filehandle, eax
 000014DD  B9 00000002		    mov ecx, 2
 000014E2			read:
 000014E2  8B D9		    mov ebx, ecx
 000014E4  A1 00004317 R	      mov eax, filehandle
 000014E9  BA 0000428A R	      mov  edx, OFFSET playerData
 000014EE  B9 00000078		      mov  ecx, lengthof playerdata
 000014F3  E8 00000000 E	      call ReadFromFile
 000014F8  A1 00004317 R	      mov eax, fileHandle
 000014FD  8B CB		    mov ecx, ebx
 000014FF  E2 E1		loop read
 00001501  B9 00000078		mov ecx, lengthof playerdata
 00001506  BE 0000428A R	mov esi, offset playerdata
 0000150B  BB 00000000		mov ebx, 0
 00001510			countPlayers:
 00001510  8A 06		    mov al, [esi]
 00001512  3C 25		    cmp al, '%'
 00001514  75 06		    jne continueCountPlayers    
 00001516  FE 05 0000431B R	    inc numPlayers
 0000151C			    continueCountPlayers:
 0000151C  46			    inc esi
 0000151D  E2 F1		loop countPlayers

 0000151F  A1 00004317 R	mov eax, fileHandle
 00001524  E8 00000000 E	call closefile
 00001529  BA 00004302 R	mov edx, offset fileName
 0000152E  E8 00000000 E	call createOutputFile
 00001533  A3 00004317 R	mov fileHandle, eax

 00001538  0F B6 0D		movzx ecx, numPlayers
	   0000431B R
 0000153F  83 F9 00		cmp ecx, 0 
 00001542  74 6C		je exitwriteprevious 
 00001544  BE 0000428A R	mov esi, offset playerData
 00001549  BF 0000431C R	mov edi, offset tempString
 0000154E			writePrevious:
 0000154E  51			push ecx
 0000154F  56			push esi
 00001550  C6 05 00004336 R	mov len, 0
	   00
 00001557  8A 06		mov al, [esi]  
 00001559  3C 26		cmp al, '&'
 0000155B  74 53		je exitwriteprevious
 0000155D			calculatePlayerLength:
 0000155D  8A 06		    mov al, [esi]
 0000155F  3C 25		    cmp al, '%'
 00001561  74 09		    je writeTemp
 00001563  FE 05 00004336 R	    inc len
 00001569  46			    inc esi
 0000156A  EB F1		jmp calculatePlayerLength
 0000156C			writeTemp:
 0000156C  5E			pop esi
 0000156D  0F B6 0D		movzx ecx, len
	   00004336 R
 00001574  41			inc ecx
 00001575  BF 0000431C R	mov edi, offset tempString
 0000157A			    copytoTemp:
 0000157A  8A 06		    mov al, [esi]
 0000157C  88 07		    mov [edi], al
 0000157E  46			    inc esi
 0000157F  47			    inc edi
 00001580  E2 F8		    loop copytoTemp
 00001582  BA 0000431C R	    mov edx, offset tempString
 00001587  0F B6 0D		    movzx ecx, len
	   00004336 R
 0000158E  41			    inc ecx
 0000158F  A1 00004317 R	    mov eax, fileHandle
 00001594  E8 00000000 E	    call writeToFile
 00001599  59			pop ecx
 0000159A  E2 B2		loop writePrevious

 0000159C			writelinebreak:
 0000159C  BA 0000432D R	mov edx, offset linebreak
 000015A1  B9 00000001		mov ecx, 1
 000015A6  A1 00004317 R	mov eax, fileHandle
 000015AB  E8 00000000 E	call writeToFile


 000015B0			exitwriteprevious:

 000015B0  BE 00004332 R	mov esi, offset arrScore + 4
 000015B5  B9 0000000A		mov ecx, 10
 000015BA  A1 00004257 R	mov eax, score
 000015BF  C6 06 00		mov byte ptr [esi], 0 
 000015C2			convertScore:
 000015C2  4E			    dec esi
 000015C3  BA 00000000		    mov edx, 0
 000015C8  F7 F1		    div ecx
 000015CA  80 C2 30		    add dl, '0'
 000015CD  88 16		    mov byte ptr [esi], dl

 000015CF  85 C0		    test eax, eax ;to check if quotient is non zero
 000015D1  75 EF		    jnz convertScore

 000015D3  BE 0000432E R	mov esi, offset arrScore
 000015D8  B9 00000004		mov ecx, lengthof arrScore

 000015DD			fixScore:
 000015DD  8A 06		mov al, [esi]
 000015DF  3C 00		cmp al, 0
 000015E1  75 04		jne writePlayerData
 000015E3  46			inc esi
 000015E4  49			dec ecx
 000015E5  EB F6		jmp fixScore

 000015E7			writePlayerData:
 000015E7  8B D6		mov edx, esi
 000015E9  A1 00004317 R	mov eax, fileHandle
 000015EE  E8 00000000 E	call writeToFile

 000015F3  BA 00004335 R	mov edx, offset space
 000015F8  B9 00000001		mov ecx, 1
 000015FD  A1 00004317 R	mov eax, fileHandle
 00001602  E8 00000000 E	call writeToFile

 00001607			writeusername:
 00001607  BE 00004241 R	mov esi, offset username
 0000160C  BF 0000430D R	mov edi, offset strusernamefile ;this is the name to write to file
 00001611  B9 00000000		mov ecx, 0
 00001616			copyName:
 00001616  8A 06		mov al, [esi]
 00001618  3C 00		cmp al, 0               ;checking for null terminator
 0000161A  74 07		je writename
 0000161C  46			inc esi
 0000161D  88 07		mov [edi], al
 0000161F  47			inc edi
 00001620  41			inc ecx
 00001621  EB F3		jmp copyName
 00001623			writeName:
 00001623  BA 0000430D R	mov edx, offset strusernamefile
 00001628  A1 00004317 R	mov eax, fileHandle
 0000162D  E8 00000000 E	call writeToFile


 00001632  BA 00004335 R	mov edx, offset space
 00001637  B9 00000001		mov ecx, 1
 0000163C  A1 00004317 R	mov eax, fileHandle
 00001641  E8 00000000 E	call writeToFile


 00001646  A0 00004265 R	mov al, level
 0000164B  A2 00004332 R	mov levelstr, al
 00001650  80 05 00004332 R	add levelstr, '0'
	   30

 00001657			writePlayerLevel:
 00001657  BA 00004332 R	mov edx, offset levelstr
 0000165C  B9 00000001		mov ecx, 1
 00001661  A1 00004317 R	mov eax, fileHandle
 00001666  E8 00000000 E	call writeToFile

 0000166B			writeTerminators:
 0000166B  BA 00004333 R	mov edx, offset terminator1
 00001670  B9 00000001		mov ecx, 1
 00001675  A1 00004317 R	mov eax, fileHandle
 0000167A  E8 00000000 E	call writeToFile

 0000167F  BA 00004334 R	mov edx, offset terminator2
 00001684  B9 00000001		mov ecx, 1
 00001689  A1 00004317 R	mov eax, fileHandle
 0000168E  E8 00000000 E	call writeToFile
 00001693  B0 04		mov al, 4
				  
					
 00001695  C3			ret
 00001696			writeScores endp
				END main
Microsoft (R) Macro Assembler Version 14.38.33135.0	    05/11/25 10:29:48
source.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00004343 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00001696 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawPlayer . . . . . . . . . . .	P Near	 00000A7A _TEXT	Length= 00000026 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdatePlayer . . . . . . . . . .	P Near	 00000AA0 _TEXT	Length= 00000019 Public STDCALL
  playerUpdate . . . . . . . . .	L Near	 00000AAE _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
checkCollision . . . . . . . . .	P Near	 00001393 _TEXT	Length= 00000081 Public STDCALL
  checkCoin  . . . . . . . . . .	L Near	 000013BD _TEXT	
  checkTeleportCollision . . . .	L Near	 000013CB _TEXT	
  checkFruitCollision  . . . . .	L Near	 000013D9 _TEXT	
  checkPowerPelletCollision  . .	L Near	 000013E7 _TEXT	
  checkHiddenPathCollision . . .	L Near	 00001402 _TEXT	
  endCheck . . . . . . . . . . .	L Near	 0000140E _TEXT	
checkPlayerEnemeyCollision . . .	P Near	 0000126D _TEXT	Length= 00000078 Public STDCALL
  checkCollisionEnemy  . . . . .	L Near	 0000127D _TEXT	
  normalGhostCollision . . . . .	L Near	 000012C2 _TEXT	
  skipLivesFix . . . . . . . . .	L Near	 000012D8 _TEXT	
  checkRest  . . . . . . . . . .	L Near	 000012E1 _TEXT	
  exitCollisionCheck . . . . . .	L Near	 000012E4 _TEXT	
checkTeleport  . . . . . . . . .	P Near	 0000143F _TEXT	Length= 0000008F Public STDCALL
  checkSecond  . . . . . . . . .	L Near	 0000144A _TEXT	
  checkThird . . . . . . . . . .	L Near	 00001463 _TEXT	
  checkFourth  . . . . . . . . .	L Near	 0000146E _TEXT	
  checkFifth . . . . . . . . . .	L Near	 00001487 _TEXT	
  checkSixth . . . . . . . . . .	L Near	 00001492 _TEXT	
  checkSeventh . . . . . . . . .	L Near	 000014AB _TEXT	
  checkEighth  . . . . . . . . .	L Near	 000014B6 _TEXT	
  exit_checkTeleport . . . . . .	L Near	 000014CD _TEXT	
decideLevel  . . . . . . . . . .	P Near	 00000491 _TEXT	Length= 000001B5 Public STDCALL
  Level1 . . . . . . . . . . . .	L Near	 000004DC _TEXT	
  Level2 . . . . . . . . . . . .	L Near	 00000517 _TEXT	
  Level3 . . . . . . . . . . . .	L Near	 00000552 _TEXT	
  Level4 . . . . . . . . . . . .	L Near	 0000058A _TEXT	
  Level5 . . . . . . . . . . . .	L Near	 000005C2 _TEXT	
  addScore . . . . . . . . . . .	L Near	 000005F0 _TEXT	
  resetGhosts  . . . . . . . . .	L Near	 0000061C _TEXT	
  gameComplete . . . . . . . . .	L Near	 00000638 _TEXT	
  endDecideLevel . . . . . . . .	L Near	 00000645 _TEXT	
drawBoard  . . . . . . . . . . .	P Near	 000009BE _TEXT	Length= 000000BC Public STDCALL
  printMap . . . . . . . . . . .	L Near	 000009D9 _TEXT	
  innerMap . . . . . . . . . . .	L Near	 000009EA _TEXT	
  checkCoin  . . . . . . . . . .	L Near	 00000A09 _TEXT	
  writeFruit . . . . . . . . . .	L Near	 00000A28 _TEXT	
  writeWall  . . . . . . . . . .	L Near	 00000A2F _TEXT	
  writeTeleportPath  . . . . . .	L Near	 00000A3B _TEXT	
  writeHiddenPath  . . . . . . .	L Near	 00000A47 _TEXT	
  writeSpace . . . . . . . . . .	L Near	 00000A53 _TEXT	
  writeMap . . . . . . . . . . .	L Near	 00000A58 _TEXT	
  endBoardPrint  . . . . . . . .	L Near	 00000A79 _TEXT	
drawGameName . . . . . . . . . .	P Near	 00000646 _TEXT	Length= 00000054 Public STDCALL
  mainScreen . . . . . . . . . .	L Near	 0000065B _TEXT	
  innerMainScreen  . . . . . . .	L Near	 00000667 _TEXT	
  writeMainScreen  . . . . . . .	L Near	 0000068B _TEXT	
drawGhost  . . . . . . . . . . .	P Near	 000011F6 _TEXT	Length= 00000077 Public STDCALL
  ghostDraw  . . . . . . . . . .	L Near	 00001202 _TEXT	
  checkGreen . . . . . . . . . .	L Near	 00001215 _TEXT	
  checkCyan  . . . . . . . . . .	L Near	 00001221 _TEXT	
  checkMagenta . . . . . . . . .	L Near	 0000122D _TEXT	
  checkWhite . . . . . . . . . .	L Near	 00001239 _TEXT	
  drawG  . . . . . . . . . . . .	L Near	 0000123E _TEXT	
drawInstructionScreen  . . . . .	P Near	 00000797 _TEXT	Length= 000000B9 Public STDCALL
  mainScreen . . . . . . . . . .	L Near	 000007AC _TEXT	
  innerMainScreen  . . . . . . .	L Near	 000007B8 _TEXT	
  writeMainScreen  . . . . . . .	L Near	 000007DC _TEXT	
  instructionsScreen . . . . . .	L Near	 000007EA _TEXT	
  printInstructions  . . . . . .	L Near	 00000814 _TEXT	
  exitInstructions . . . . . . .	L Near	 0000082D _TEXT	
  clearInstructions  . . . . . .	L Near	 00000838 _TEXT	
drawMainScreen . . . . . . . . .	P Near	 000006D5 _TEXT	Length= 000000C2 Public STDCALL
  drawMain . . . . . . . . . . .	L Near	 000006D5 _TEXT	
  mainScreen . . . . . . . . . .	L Near	 000006E5 _TEXT	
  innerMainScreen  . . . . . . .	L Near	 000006F1 _TEXT	
  writeMainScreen  . . . . . . .	L Near	 00000715 _TEXT	
  takeMainMenuInput  . . . . . .	L Near	 00000723 _TEXT	
  startGame  . . . . . . . . . .	L Near	 00000781 _TEXT	
  instructionScreen  . . . . . .	L Near	 00000783 _TEXT	
  exitGame . . . . . . . . . . .	L Near	 0000078D _TEXT	
  exitMenuFunc . . . . . . . . .	L Near	 00000796 _TEXT	
endScreen  . . . . . . . . . . .	P Near	 0000090B _TEXT	Length= 000000B3 Public STDCALL
  takeEndInput . . . . . . . . .	L Near	 000009A7 _TEXT	
  exitEndScreen  . . . . . . . .	L Near	 000009B6 _TEXT	
inputName  . . . . . . . . . . .	P Near	 0000069A _TEXT	Length= 0000003B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000491 Public STDCALL
  decideNewLevel . . . . . . . .	L Near	 00000026 _TEXT	
  gameLoop . . . . . . . . . . .	L Near	 00000071 _TEXT	
  disablePowerMode . . . . . . .	L Near	 000000AB _TEXT	
  skipPowerModeTimer . . . . . .	L Near	 000000B2 _TEXT	
  continueLevel  . . . . . . . .	L Near	 000000D1 _TEXT	
  noGhostUpdate  . . . . . . . .	L Near	 00000100 _TEXT	
  move . . . . . . . . . . . . .	L Near	 00000140 _TEXT	
  pauseMenu  . . . . . . . . . .	L Near	 00000186 _TEXT	
  moveUp . . . . . . . . . . . .	L Near	 00000195 _TEXT	
  FruitUp  . . . . . . . . . . .	L Near	 000001DE _TEXT	
  spaceUp  . . . . . . . . . . .	L Near	 000001F7 _TEXT	
  playerUp . . . . . . . . . . .	L Near	 000001FB _TEXT	
  continue_up  . . . . . . . . .	L Near	 0000021C _TEXT	
  noTeleportUp . . . . . . . . .	L Near	 0000022A _TEXT	
  moveDown . . . . . . . . . . .	L Near	 0000023B _TEXT	
  FruitDown  . . . . . . . . . .	L Near	 00000284 _TEXT	
  spaceDown  . . . . . . . . . .	L Near	 00000296 _TEXT	
  playerDown . . . . . . . . . .	L Near	 0000029A _TEXT	
  continue_down  . . . . . . . .	L Near	 000002BB _TEXT	
  noTeleportDown . . . . . . . .	L Near	 000002C9 _TEXT	
  moveLeft . . . . . . . . . . .	L Near	 000002DA _TEXT	
  fruitLeft  . . . . . . . . . .	L Near	 00000323 _TEXT	
  spaceLeft  . . . . . . . . . .	L Near	 0000033C _TEXT	
  playerLeft . . . . . . . . . .	L Near	 00000340 _TEXT	
  continue_left  . . . . . . . .	L Near	 00000361 _TEXT	
  noTeleportLeft . . . . . . . .	L Near	 0000036F _TEXT	
  moveRight  . . . . . . . . . .	L Near	 00000380 _TEXT	
  fruitRight . . . . . . . . . .	L Near	 000003C9 _TEXT	
  spaceRight . . . . . . . . . .	L Near	 000003E2 _TEXT	
  playerRight  . . . . . . . . .	L Near	 000003E6 _TEXT	
  continue_Right . . . . . . . .	L Near	 00000403 _TEXT	
  noTeleportRight  . . . . . . .	L Near	 00000411 _TEXT	
  enemyPlayerCollision . . . . .	L Near	 0000041F _TEXT	
  playerDead . . . . . . . . . .	L Near	 0000042F _TEXT	
  continueNormal . . . . . . . .	L Near	 00000465 _TEXT	
  exitGame . . . . . . . . . . .	L Near	 00000476 _TEXT	
pauseMenuScreen  . . . . . . . .	P Near	 00000850 _TEXT	Length= 000000BB Public STDCALL
  menuPaused . . . . . . . . . .	L Near	 00000864 _TEXT	
  drawPause  . . . . . . . . . .	L Near	 000008C8 _TEXT	
  instructionScreenPause . . . .	L Near	 000008FB _TEXT	
  exitPause  . . . . . . . . . .	L Near	 0000090A _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
reDrawCoin . . . . . . . . . . .	P Near	 000012E5 _TEXT	Length= 0000001F Public STDCALL
reDrawSpace  . . . . . . . . . .	P Near	 00001304 _TEXT	Length= 00000015 Public STDCALL
resetCollisionVars . . . . . . .	P Near	 00001414 _TEXT	Length= 0000002B Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
updateGhost  . . . . . . . . . .	P Near	 00000AB9 _TEXT	Length= 0000073D Public STDCALL
  ghostMov . . . . . . . . . . .	L Near	 00000ACC _TEXT	
  pinkyRedrawSpace . . . . . . .	L Near	 00000B58 _TEXT	
  skipPinkyRedraw  . . . . . . .	L Near	 00000B6F _TEXT	
  pinkySimRight  . . . . . . . .	L Near	 00000B95 _TEXT	
  pinkyCheckHorz . . . . . . . .	L Near	 00000B97 _TEXT	
  pinkyMoveRightFinal  . . . . .	L Near	 00000BD4 _TEXT	
  pinkyTryVertical . . . . . . .	L Near	 00000BE6 _TEXT	
  pinkySimDown . . . . . . . . .	L Near	 00000BF0 _TEXT	
  pinkyCheckVert . . . . . . . .	L Near	 00000BF2 _TEXT	
  pinkyMoveDownFinal . . . . . .	L Near	 00000C2F _TEXT	
  pinkyStay  . . . . . . . . . .	L Near	 00000C41 _TEXT	
  pinkyTryLeft . . . . . . . . .	L Near	 00000C6C _TEXT	
  pinkyMoveLeftFinal . . . . . .	L Near	 00000CA1 _TEXT	
  pinkyTryRight  . . . . . . . .	L Near	 00000CB3 _TEXT	
  pinkyMoveRightFinal2 . . . . .	L Near	 00000CE8 _TEXT	
  pinkyTryUp . . . . . . . . . .	L Near	 00000CFA _TEXT	
  pinkyMoveUpFinal . . . . . . .	L Near	 00000D2F _TEXT	
  pinkyTryDown . . . . . . . . .	L Near	 00000D41 _TEXT	
  pinkyMoveDownFinal2  . . . . .	L Near	 00000D79 _TEXT	
  decideMovement . . . . . . . .	L Near	 00000D8B _TEXT	
  ghostUp  . . . . . . . . . . .	L Near	 00000DD0 _TEXT	
  coinCollisionUp  . . . . . . .	L Near	 00000E49 _TEXT	
  updateSpaceUp  . . . . . . . .	L Near	 00000E9A _TEXT	
  moveUp . . . . . . . . . . . .	L Near	 00000EB1 _TEXT	
  ghostDown  . . . . . . . . . .	L Near	 00000EC3 _TEXT	
  coinCollisionDown  . . . . . .	L Near	 00000F3C _TEXT	
  updateSpaceDown  . . . . . . .	L Near	 00000F8D _TEXT	
  moveDown . . . . . . . . . . .	L Near	 00000FA4 _TEXT	
  ghostLeft  . . . . . . . . . .	L Near	 00000FB6 _TEXT	
  coinCollisionLeft  . . . . . .	L Near	 0000102F _TEXT	
  updateSpaceLeft  . . . . . . .	L Near	 00001080 _TEXT	
  moveLeft . . . . . . . . . . .	L Near	 00001097 _TEXT	
  ghostRight . . . . . . . . . .	L Near	 000010A9 _TEXT	
  coinCollisionRight . . . . . .	L Near	 0000111E _TEXT	
  updateSpaceRight . . . . . . .	L Near	 0000116F _TEXT	
  moveRight  . . . . . . . . . .	L Near	 00001186 _TEXT	
  generateRandomMove . . . . . .	L Near	 00001195 _TEXT	
  possibilityUp  . . . . . . . .	L Near	 000011B8 _TEXT	
  possibilityDown  . . . . . . .	L Near	 000011C4 _TEXT	
  possibilityLeft  . . . . . . .	L Near	 000011D0 _TEXT	
  possibilityRight . . . . . . .	L Near	 000011DC _TEXT	
  ghostUpdation  . . . . . . . .	L Near	 000011E8 _TEXT	
  endGhostUpdate . . . . . . . .	L Near	 000011F5 _TEXT	
updateLevel  . . . . . . . . . .	P Near	 0000136B _TEXT	Length= 00000028 Public STDCALL
updateLives  . . . . . . . . . .	P Near	 00001343 _TEXT	Length= 00000028 Public STDCALL
updateScore  . . . . . . . . . .	P Near	 00001319 _TEXT	Length= 0000002A Public STDCALL
writeScores  . . . . . . . . . .	P Near	 000014CE _TEXT	Length= 000001C8 Public STDCALL
  read . . . . . . . . . . . . .	L Near	 000014E2 _TEXT	
  countPlayers . . . . . . . . .	L Near	 00001510 _TEXT	
  continueCountPlayers . . . . .	L Near	 0000151C _TEXT	
  writePrevious  . . . . . . . .	L Near	 0000154E _TEXT	
  calculatePlayerLength  . . . .	L Near	 0000155D _TEXT	
  writeTemp  . . . . . . . . . .	L Near	 0000156C _TEXT	
  copytoTemp . . . . . . . . . .	L Near	 0000157A _TEXT	
  writelinebreak . . . . . . . .	L Near	 0000159C _TEXT	
  exitwriteprevious  . . . . . .	L Near	 000015B0 _TEXT	
  convertScore . . . . . . . . .	L Near	 000015C2 _TEXT	
  fixScore . . . . . . . . . . .	L Near	 000015DD _TEXT	
  writePlayerData  . . . . . . .	L Near	 000015E7 _TEXT	
  writeusername  . . . . . . . .	L Near	 00001607 _TEXT	
  copyName . . . . . . . . . . .	L Near	 00001616 _TEXT	
  writeName  . . . . . . . . . .	L Near	 00001623 _TEXT	
  writePlayerLevel . . . . . . .	L Near	 00001657 _TEXT	
  writeTerminators . . . . . . .	L Near	 0000166B _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
ConsoleInfo  . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000000 _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
POWER_MODE_DURATION  . . . . . .	Number	 000000C8h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrScore . . . . . . . . . . . .	Byte	 0000432E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blockCount . . . . . . . . . . .	Byte	 0000433B _DATA	
blue . . . . . . . . . . . . . .	Number	 00000001h   
boolCollision  . . . . . . . . .	Byte	 000041CD _DATA	
brown  . . . . . . . . . . . . .	Number	 00000006h   
coinCollision  . . . . . . . . .	Byte	 000041CE _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endGame  . . . . . . . . . . . .	Byte	 0000425B _DATA	
endStr . . . . . . . . . . . . .	Byte	 00003FFA _DATA	
enemyCollision . . . . . . . . .	Byte	 000041CF _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00004317 _DATA	
fileName . . . . . . . . . . . .	Byte	 00004302 _DATA	
fruitCollision . . . . . . . . .	Byte	 000041D2 _DATA	
ghostChar  . . . . . . . . . . .	Byte	 00004267 _DATA	
ghostColor . . . . . . . . . . .	Byte	 00004285 _DATA	
ghostMovement  . . . . . . . . .	Byte	 0000426C _DATA	
ghostXPosOriginal  . . . . . . .	Byte	 00004276 _DATA	
ghostXPos  . . . . . . . . . . .	Byte	 00004271 _DATA	
ghostYPosOriginal  . . . . . . .	Byte	 00004280 _DATA	
ghostYPos  . . . . . . . . . . .	Byte	 0000427B _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hiddenPathCollision  . . . . . .	Byte	 000041D1 _DATA	
inputChar  . . . . . . . . . . .	Byte	 00004240 _DATA	
instructions_rows  . . . . . . .	Byte	 000041CA _DATA	
instructions . . . . . . . . . .	Byte	 00004014 _DATA	
len  . . . . . . . . . . . . . .	Byte	 00004336 _DATA	
levelBlockCounts . . . . . . . .	Byte	 00004337 _DATA	
levelStr . . . . . . . . . . . .	Byte	 00004332 _DATA	
level  . . . . . . . . . . . . .	Byte	 00004265 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineBreak  . . . . . . . . . . .	Byte	 0000432D _DATA	
lives  . . . . . . . . . . . . .	Byte	 00004260 _DATA	
lvlSpeed . . . . . . . . . . . .	Word	 00004263 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
main_title_rows  . . . . . . . .	Byte	 000041CB _DATA	
main_title . . . . . . . . . . .	Byte	 00003B26 _DATA	
mapLength  . . . . . . . . . . .	DWord	 0000000C _DATA	
mapStarted . . . . . . . . . . .	Byte	 000041D3 _DATA	
map_1  . . . . . . . . . . . . .	Byte	 00000010 _DATA	
map_2  . . . . . . . . . . . . .	Byte	 00000BE1 _DATA	
map_3  . . . . . . . . . . . . .	Byte	 000017B2 _DATA	
map_4  . . . . . . . . . . . . .	Byte	 00002383 _DATA	
map_5  . . . . . . . . . . . . .	Byte	 00002F54 _DATA	
map  . . . . . . . . . . . . . .	DWord	 00000008 _DATA	
numCoinsCollected  . . . . . . .	DWord	 00004253 _DATA	
numGhostsInLevel . . . . . . . .	Byte	 00004266 _DATA	
numGhosts  . . . . . . . . . . .	Byte	 0000425F _DATA	
numPlayers . . . . . . . . . . .	Byte	 0000431B _DATA	
pauseString  . . . . . . . . . .	Byte	 00004144 _DATA	
pause_rows . . . . . . . . . . .	Byte	 000041CC _DATA	
playerCh . . . . . . . . . . . .	Byte	 0000425E _DATA	
playerdata . . . . . . . . . . .	Byte	 0000428A _DATA	
powerModeTimer . . . . . . . . .	Word	 0000433D _DATA	
powerMode  . . . . . . . . . . .	Byte	 0000433C _DATA	
powerPelletPoints  . . . . . . .	DWord	 0000433F _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rows_map . . . . . . . . . . . .	Byte	 00003B25 _DATA	
score  . . . . . . . . . . . . .	DWord	 00004257 _DATA	
spaces . . . . . . . . . . . . .	Byte	 000041A1 _DATA	
space  . . . . . . . . . . . . .	Byte	 00004335 _DATA	
strExitGame  . . . . . . . . . .	Byte	 00004203 _DATA	
strInstructions  . . . . . . . .	Byte	 000041F3 _DATA	
strLevel . . . . . . . . . . . .	Byte	 00004218 _DATA	
strLives . . . . . . . . . . . .	Byte	 00004210 _DATA	
strScore . . . . . . . . . . . .	Byte	 000041D9 _DATA	
strStartGame . . . . . . . . . .	Byte	 000041E1 _DATA	
strUserName  . . . . . . . . . .	Byte	 00004220 _DATA	
strUsernameFile  . . . . . . . .	Byte	 0000430D _DATA	
teleportCollision  . . . . . . .	Byte	 000041D0 _DATA	
tempDouble . . . . . . . . . . .	DWord	 000041D5 _DATA	
tempString . . . . . . . . . . .	Byte	 0000431C _DATA	
temp . . . . . . . . . . . . . .	Byte	 000041D4 _DATA	
terminator1  . . . . . . . . . .	Byte	 00004333 _DATA	
terminator2  . . . . . . . . . .	Byte	 00004334 _DATA	
timer  . . . . . . . . . . . . .	Word	 00004261 _DATA	
totalCoins . . . . . . . . . . .	DWord	 0000424B _DATA	
totalScore . . . . . . . . . . .	DWord	 0000424F _DATA	
userNameInput  . . . . . . . . .	Byte	 0000422E _DATA	
userName . . . . . . . . . . . .	Byte	 00004241 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPos . . . . . . . . . . . . . .	Byte	 0000425C _DATA	
yPos . . . . . . . . . . . . . .	Byte	 0000425D _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
